openapi: 3.0.0
tags:
  - name: Json Api
  - name: Users
  - name: Authentication
  - name: Breaks 
  - name: Articles
  - name: Images
  - name: Evaluations
  - name: Negociations
  - name: Sales
  - name: Repairs
  - name: Conversations
  - name: Messages
  - name: Blockings
  - name: Criteria
  - name: Options
  - name: Likes
info:
  title: "Restor'It"
  description: "The documentation of Restor'It API"
  contact:
    email: clement@sanchez.sh
    name: Cl√©ment SANCHEZ
  version: '2.0'
servers:
  - url: 'https://api.restorit.fr'
    description: Production
  - url: 'https://staging.api.restorit.fr'
    description: Staging
  - url: 'http://localhost:8000'
    description: Development
paths:
  '/likes':
    get:
      operationId: indexLikes
      tags:
        - Likes
      summary: Get a list of likes
      description: Return a collection of **like** resources.
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
        - schema:
            type: string
          in: query
          name: sort
          description: Comma separated list of fields to sort. Please refer to the JSON API article
        - schema:
            type: array
          in: query
          name: filter
          description: Array of filter. Please refer to the JSON API article
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/LikesResponse"
        '422':
          description: Unprocessable Entity
      security:
        - bearerAuth: []
    post:
      tags:
        - Likes
      summary: Store a like
      description: 'Create an **like** resource.'
      operationId: storeLike
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/LikeRequest"
            examples:
              Example:
                value:
                  data:
                    type: likes
                    id: 1
                    links:
                      self: 'https://api.restorit.fr/likes/1'
                    relationships:
                      article:
                        type: object
                        id: 1
                        data:
                          type: articles
                          id: 1
      responses:
        '201':
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/LikeResponse"
        '401':
          description: Not Authenticated
        '403':
          description: Forbidden
        '422':
          description: Unprocessable Entity
      security:
        - bearerAuth: []
    parameters: []
  '/likes/{id}':
    parameters:
      - name: id
        in: path
        description: Like Id
        required: true
        schema:
          type: integer
    get:
      tags:
        - Likes
      security:
        - bearerAuth: []
      summary: Get a like
      description: 'Returns an **like** resource.'
      operationId: showLike
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/LikeResponse"
        '404':
          description: Like not found
        '422':
          description: Unprocessable Entity
    delete:
      tags:
        - Likes
      summary: Delete a like
      description: 'Delete a **like** resource.'
      operationId: deleteLike
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/LikeResponse"
        '401':
          description: Not Authenticated
        '403':
          description: Not Allowed
        '404':
          description: Like not found
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: integer
            minimum: 1
          name: id
          in: path
          description: ID of the resource
          required: true
  '/blockings':
    get:
      operationId: indexBlockings
      tags:
        - Blockings
      summary: Get a list of blockings
      description: Return a collection of **blocking** resources.
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
        - schema:
            type: string
          in: query
          name: sort
          description: Comma separated list of fields to sort. Please refer to the JSON API article
        - schema:
            type: array
          in: query
          name: filter
          description: Array of filter. Please refer to the JSON API article
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/BlockingsResponse"
        '422':
          description: Unprocessable Entity
      security:
        - bearerAuth: []
    post:
      tags:
        - Blockings
      summary: Store a blocking
      description: 'Create an **blocking** resource.'
      operationId: storeBlocking
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/BlockingRequest"
            examples:
              Example:
                value:
                  data:
                    type: blockings
                    id: 1
                    links:
                      self: 'https://api.restorit.fr/blockings/1'
                    relationships:
                      blockedUser:
                        data:
                          type: users
                          id: 1
      responses:
        '201':
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/BlockingResponse"
        '401':
          description: Not Authenticated
        '403':
          description: Forbidden
        '422':
          description: Unprocessable Entity
      security:
        - bearerAuth: []
    parameters: []
  '/blockings/{id}':
    parameters:
      - name: id
        in: path
        description: Blocking Id
        required: true
        schema:
          type: integer
    get:
      tags:
        - Blockings
      security:
        - bearerAuth: []
      summary: Get a blocking
      description: 'Returns an **blocking** resource.'
      operationId: showBlocking
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/BlockingResponse"
        '404':
          description: Blocking not found
        '422':
          description: Unprocessable Entity
    delete:
      tags:
        - Blockings
      summary: Delete a blocking
      description: 'Delete a **blocking** resource.'
      operationId: deleteBlocking
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/BlockingResponse"
        '401':
          description: Not Authenticated
        '403':
          description: Not Allowed
        '404':
          description: Blocking not found
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: integer
            minimum: 1
          name: id
          in: path
          description: ID of the resource
          required: true
  '/conversations':
    get:
      operationId: indexConversations
      tags:
        - Conversations
      summary: Get a list of conversations
      description: Return a collection of **conversation** resources.
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
        - schema:
            type: string
          in: query
          name: sort
          description: Comma separated list of fields to sort. Please refer to the JSON API article
        - schema:
            type: array
          in: query
          name: filter
          description: Array of filter. Please refer to the JSON API article
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/ConversationsResponse"
        '422':
          description: Unprocessable Entity
      security:
        - bearerAuth: []
    post:
      tags:
        - Conversations
      summary: Store a conversation
      description: 'Create an **conversation** resource.'
      operationId: storeConversation
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/ConversationRequest"
            examples:
              Example:
                value:
                  data:
                    type: conversations
                    relationships:
                      users:
                        data:
                          - type: users
                            id: 2
      responses:
        '201':
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/ConversationResponse"
        '401':
          description: Not Authenticated
        '403':
          description: Forbidden
        '422':
          description: Unprocessable Entity
      security:
        - bearerAuth: []
    parameters: []
  '/conversations/{id}':
    parameters:
      - name: id
        in: path
        description: Conversation Id
        required: true
        schema:
          type: integer
    get:
      tags:
        - Conversations
      security:
        - bearerAuth: []
      summary: Get a conversation
      description: 'Returns an **conversation** resource.'
      operationId: showConversation
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/ConversationResponse"
        '404':
          description: Conversation not found
        '422':
          description: Unprocessable Entity
    delete:
      tags:
        - Conversations
      summary: Delete a conversation
      description: 'Delete a **conversation** resource.'
      operationId: deleteConversation
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/ConversationResponse"
        '401':
          description: Not Authenticated
        '403':
          description: Not Allowed
        '404':
          description: Conversation not found
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: integer
            minimum: 1
          name: id
          in: path
          description: ID of the resource
          required: true
  '/messages':
    get:
      operationId: indexMessages
      tags:
        - Negociations
      summary: Get a list of messages
      description: Return a collection of **message** resources.
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
        - schema:
            type: string
          in: query
          name: sort
          description: Comma separated list of fields to sort. Please refer to the JSON API article
        - schema:
            type: array
          in: query
          name: filter
          description: Array of filter. Please refer to the JSON API article
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/MessagesResponse"
        '422':
          description: Unprocessable Entity
      security:
        - bearerAuth: []
    post:
      tags:
        - Messages
      summary: Store a message
      description: 'Create an **message** resource.'
      operationId: storeMessage
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/MessageRequest"
            examples:
              Example:
                value:
                  data:
                    type: messages
                    id: 1
                    attributes:
                      text: "Hello world !"
                    links:
                      self: 'https://api.restorit.fr/messages/1'
                    relationships:
                      conversation:
                        data:
                          type: conversations
                          id: 1
      responses:
        '201':
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/NegociationResponse"
        '401':
          description: Not Authenticated
        '403':
          description: Forbidden
        '422':
          description: Unprocessable Entity
      security:
        - bearerAuth: []
    parameters: []
  '/messages/{id}':
    parameters:
      - name: id
        in: path
        description: Message Id
        required: true
        schema:
          type: integer
    get:
      tags:
        - Messages
      security:
        - bearerAuth: []
      summary: Get a message
      description: 'Returns an **message** resource.'
      operationId: showMessage
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        '404':
          description: Message not found
        '422':
          description: Unprocessable Entity
    delete:
      tags:
        - Messages
      summary: Delete a message
      description: 'Delete a **message** resource.'
      operationId: deleteMessage
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        '401':
          description: Not Authenticated
        '403':
          description: Not Allowed
        '404':
          description: Message not found
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: integer
            minimum: 1
          name: id
          in: path
          description: ID of the resource
          required: true
    patch:
      summary: Update a message
      operationId: updateMessage
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        '401':
          description: Unauthenticated
        '403':
          description: Not Allowed
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      description: 'Update a **message** resource.'
      parameters: []
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/MessageRequest"
            examples:
              Example:
                value:
                  data:
                    type: messages
                    id: 1
                    attributes:
                      text: "Voici le nouveau texte"
                    links:
                      self: 'https://api.restorit.fr/negociations/1'
      security:
        - bearerAuth: []
      tags:
        - Messages
  '/images':
    get:
      operationId: indexImages
      tags:
        - Images
      summary: Get a list of images
      description: Return a collection of **image** resources.
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
        - schema:
            type: string
          in: query
          name: sort
          description: Comma separated list of fields to sort. Please refer to the JSON API article
        - schema:
            type: array
          in: query
          name: filter
          description: Array of filter. Please refer to the JSON API article
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/ImagesResponse"
        '422':
          description: Unprocessable Entity
      security:
        - bearerAuth: []
    post:
      tags:
        - Images
      summary: Store a image
      description: 'Create an **image** resource.'
      operationId: storeImage
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/ImageRequest"
            examples:
              Example:
                value:
                  data:
                    type: images
                    id: 1
                    attributes:
                      content: "base64ImageContent"
                    links:
                      self: 'https://api.restorit.fr/images/1'
                    relationships:
                      imageable:
                        data:
                          type: users
                          id: 1
      responses:
        '201':
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/ImageResponse"
        '401':
          description: Not Authenticated
        '403':
          description: Forbidden
        '422':
          description: Unprocessable Entity
      security:
        - bearerAuth: []
    parameters: []
  '/images/{id}':
    parameters:
      - name: id
        in: path
        description: Image Id
        required: true
        schema:
          type: integer
    get:
      tags:
        - Images
      security:
        - bearerAuth: []
      summary: Get an image
      description: 'Returns a **image** resource.'
      operationId: showImage
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/ImageResponse"
        '404':
          description: Image not found
        '422':
          description: Unprocessable Entity
    delete:
      tags:
        - Images
      summary: Delete an image
      description: 'Delete an **image** resource.'
      operationId: deleteImage
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/ImageResponse"
        '401':
          description: Not Authenticated
        '403':
          description: Not Allowed
        '404':
          description: Image not found
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: integer
            minimum: 1
          name: id
          in: path
          description: ID of the resource
          required: true
    patch:
      summary: Update an image
      operationId: updateImage
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/ImageResponse"
        '401':
          description: Unauthenticated
        '403':
          description: Not Allowed
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      description: 'Update an **image** resource.'
      parameters: []
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/ImageRequest"
            examples:
              Example:
                value:
                  data:
                    type: images
                    id: 1
                    relationships:
                      imageable:
                        data:
                          type: articles
                          id: 1
                    links:
                      self: 'https://api.restorit.fr/images/1'
      security:
        - bearerAuth: []
      tags:
        - Images
  '/negociations':
    get:
      operationId: indexNegociations
      tags:
        - Negociations
      summary: Get a list of negociations
      description: Return a collection of **negociation** resources.
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
        - schema:
            type: string
          in: query
          name: sort
          description: Comma separated list of fields to sort. Please refer to the JSON API article
        - schema:
            type: array
          in: query
          name: filter
          description: Array of filter. Please refer to the JSON API article
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/NegociationsResponse"
        '422':
          description: Unprocessable Entity
      security:
        - bearerAuth: []
    post:
      tags:
        - Negociations
      summary: Store a negociation
      description: 'Create an **negociation** resource.'
      operationId: storeNegociation
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/NegociationRequest"
            examples:
              Example:
                value:
                  data:
                    type: negociations
                    id: 1
                    attributes:
                      price: 130
                    links:
                      self: 'https://api.restorit.fr/negociations/1'
      responses:
        '201':
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/NegociationResponse"
        '401':
          description: Not Authenticated
        '403':
          description: Forbidden
        '422':
          description: Unprocessable Entity
      security:
        - bearerAuth: []
    parameters: []
  '/negociations/{id}':
    parameters:
      - name: id
        in: path
        description: Negociation Id
        required: true
        schema:
          type: integer
    get:
      tags:
        - Negociations
      security:
        - bearerAuth: []
      summary: Get a negociation
      description: 'Returns an **negociation** resource.'
      operationId: showNegociation
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/NegociationResponse"
        '404':
          description: Evaluation not found
        '422':
          description: Unprocessable Entity
    delete:
      tags:
        - Negociations
      summary: Delete a negociation
      description: 'Delete a **negociation** resource.'
      operationId: deleteNegociation
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/NegociationResponse"
        '401':
          description: Not Authenticated
        '403':
          description: Not Allowed
        '404':
          description: Negociation not found
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: integer
            minimum: 1
          name: id
          in: path
          description: ID of the resource
          required: true
    patch:
      summary: Update an negociation
      operationId: updateNegociation
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/NegociationResponse"
        '401':
          description: Unauthenticated
        '403':
          description: Not Allowed
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      description: 'Update an **negociation** resource.'
      parameters: []
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/NegociationRequest"
            examples:
              Example:
                value:
                  data:
                    type: negociations
                    id: 1
                    attributes:
                      price: 130
                    links:
                      self: 'https://api.restorit.fr/negociations/1'
      security:
        - bearerAuth: []
      tags:
        - Negociations
  '/evaluations':
    get:
      operationId: indexEvaluations
      tags:
        - Evaluations
      summary: Get a list of evaluations
      description: Return a collection of **evaluation** resources.
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
        - schema:
            type: string
          in: query
          name: sort
          description: Comma separated list of fields to sort. Please refer to the JSON API article
        - schema:
            type: array
          in: query
          name: filter
          description: Array of filter. Please refer to the JSON API article
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/EvaluationsResponse"
        '422':
          description: Unprocessable Entity
      security:
        - bearerAuth: []    
    post:
      tags:
        - Evaluations
      summary: Store an evaluation
      description: 'Create an **evaluation** resource.'
      operationId: storeEvaluation
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/EvaluationRequest"
            examples:
              Example:
                value:
                  data:
                    type: evaluations
                    attributes:
                      comment: Maybe this is a problem in the graphic card...
                      cost: 4
                      difficulty: 1
                    relationships:
                      article:
                        data:
                          type: articles
                          id: 1
      responses:
        '201':
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/EvaluationResponse"
        '401':
          description: Not Authenticated
        '403':
          description: Forbidden
        '422':
          description: Unprocessable Entity
      security:
        - bearerAuth: []
    parameters: []
  '/evaluations/{id}':
    parameters:
      - name: id
        in: path
        description: Evaluation Id
        required: true
        schema:
          type: integer
    get:
      tags:
        - Evaluations
      summary: Get an evaluation
      description: 'Returns an **evaluation** resource.'
      operationId: showEvaluation
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/EvaluationResponse"
        '404':
          description: Evaluation not found
        '422':
          description: Unprocessable Entity
    delete:
      tags:
        - Evaluations
      summary: Delete an evaluation
      description: 'Delete a **evaluation** resource.'
      operationId: deleteEvaluation
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/EvaluationResponse"
        '401':
          description: Not Authenticated
        '403':
          description: Not Allowed
        '404':
          description: Evaluation not found
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: integer
            minimum: 1
          name: id
          in: path
          description: ID of the resource
          required: true
    patch:
      summary: Update an evaluation
      operationId: updateEvaluation
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/EvaluationResponse"
        '401':
          description: Unauthenticated
        '403':
          description: Not Allowed
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      description: 'Update an **evaluation** resource.'
      parameters: []
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/EvaluationRequest"
            examples:
              Example:
                value:
                  data:
                    type: evaluations
                    id: 1
                    attributes:
                      createdAt: '2020-02-02 00:0:00'
                      updatedAt: '2020-02-02 00:0:00'
                      comment: Maybe this is a problem in the graphic card...
                      cost: 4
                      difficulty: 1
                    relationships: {}
                    links:
                      self: 'https://api.restorit.fr/evaluations/1'
                    meta: {}
                  links: {}
                  meta: {}
                  included: []
      security:
        - bearerAuth: []
      tags:
        - Evaluations
  '/sales':
    get:
      operationId: indexSales
      tags:
        - Sales
      summary: Get a list of sales
      description: Return a collection of **sale** resources.
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
        - schema:
            type: string
          in: query
          name: sort
          description: Comma separated list of fields to sort. Please refer to the JSON API article
        - schema:
            type: array
          in: query
          name: filter
          description: Array of filter. Please refer to the JSON API article
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/SalesResponse"
        '422':
          description: Unprocessable Entity
      security:
        - bearerAuth: []
    post:
      tags:
        - Sales
      summary: Store a sale
      description: 'Create an **sale** resource.'
      operationId: storeSale
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/SaleRequest"
            examples:
              Example:
                value:
                  data:
                    type: sales
                    relationships:
                      negociation:
                        data:
                          type: negociation
                          id: 1
      responses:
        '201':
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/EvaluationResponse"
        '401':
          description: Not Authenticated
        '403':
          description: Forbidden
        '422':
          description: Unprocessable Entity
      security:
        - bearerAuth: []
    parameters: []
  '/sales/{id}':
    parameters:
      - name: id
        in: path
        description: Sale Id
        required: true
        schema:
          type: integer
    get:
      tags:
        - Sales
      summary: Get a sale
      description: 'Returns an **sale** resource.'
      operationId: showSale
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/SaleResponse"
        '404':
          description: Sale not found
        '422':
          description: Unprocessable Entity
    delete:
      tags:
        - Sales
      summary: Delete a sale
      description: 'Delete a **sale** resource.'
      operationId: deleteSale
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/SaleResponse"
        '401':
          description: Not Authenticated
        '403':
          description: Not Allowed
        '404':
          description: Sale not found
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: integer
            minimum: 1
          name: id
          in: path
          description: ID of the resource
          required: true
    patch:
      summary: Update a sale
      operationId: updateSale
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/SaleResponse"
        '401':
          description: Unauthenticated
        '403':
          description: Not Allowed
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      description: 'Update a **sale** resource.'
      parameters: []
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/SaleRequest"
            examples:
              Example:
                value:
                  data:
                    type: sales
                    id: 1
                    relationships: {}
                    links:
                      self: 'https://api.restorit.fr/sales/1'
                    meta: {}
                  links: {}
                  meta: {}
                  included: []
      security:
        - bearerAuth: []
      tags:
        - Sales
  '/options':
    get:
      operationId: indexOptions
      tags:
        - Options
      summary: Get a list of options
      description: Return a collection of **option** resources.
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
        - schema:
            type: string
          in: query
          name: sort
          description: Comma separated list of fields to sort. Please refer to the JSON API article
        - schema:
            type: array
          in: query
          name: filter
          description: Array of filter. Please refer to the JSON API article
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/OptionsResponse"
        '422':
          description: Unprocessable Entity
    post:
      tags:
        - Options
      summary: Store an option
      description: 'Create an **option** resource.'
      operationId: storeOption
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/OptionRequest"
            examples:
              Example:
                value:
                  data:
                    type: options
                    attributes:
                      name: Apple
                    relationships:
                      criterion:
                        data:
                          type: criteria
                          id: 1
                      parents:
                        data:
                          - type: options
                            id: 2
      responses:
        '201':
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/OptionResponse"
        '401':
          description: Not Authenticated
        '403':
          description: Forbidden
        '422':
          description: Unprocessable Entity
      security:
        - bearerAuth: []
    parameters: []
  '/options/{id}':
    parameters:
      - name: id
        in: path
        description: Option Id
        required: true
        schema:
          type: integer
    get:
      tags:
        - Options
      summary: Get an option
      description: 'Returns an **option** resource.'
      operationId: showOption
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/OptionResponse"
        '404':
          description: Option not found
        '422':
          description: Unprocessable Entity
    delete:
      tags:
        - Options
      summary: Delete an option
      description: 'Delete a **option** resource.'
      operationId: deleteOption
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/OptionResponse"
        '401':
          description: Not Authenticated
        '403':
          description: Not Allowed
        '404':
          description: Option not found
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: integer
            minimum: 1
          name: id
          in: path
          description: ID of the resource
          required: true
    patch:
      summary: Update an option
      operationId: updateOption
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/OptionResponse"
        '401':
          description: Unauthenticated
        '403':
          description: Not Allowed
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      description: 'Update an **option** resource.'
      parameters: []
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/OptionRequest"
            examples:
              Example:
                value:
                  data:
                    - type: options
                      id: 1
                      attributes:
                        name: Apple
                      relationships: {}
                      links:
                        self: 'https://api.restorit.fr/options/1'
                      meta: {}
                  links: {}
                  meta: {}
                  included: []
      security:
        - bearerAuth: []
      tags:
        - Options
  '/repairs':
    get:
      operationId: indexRepairs
      tags:
        - Repairs
      summary: Get a list of repairs
      description: Return a collection of **repair** resources.
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
        - schema:
            type: string
          in: query
          name: sort
          description: Comma separated list of fields to sort. Please refer to the JSON API article
        - schema:
            type: array
          in: query
          name: filter
          description: Array of filter. Please refer to the JSON API article
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/RepairsResponse"
        '422':
          description: Unprocessable Entity
    post:
      tags:
        - Repairs
      summary: Store a repair
      description: 'Create a **repair** resource'
      operationId: storeRepair
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/RepairRequest"
            examples:
              Example:
                value:
                  data:
                    - type: repairs
                      id: 1
                      attributes:
                        comment: "I changed the broken screen and now it's ok !"
                      relationships: {}
                      links:
                        self: 'https://api.restorit.fr/repairs/1'
                      meta: {}
                  links: {}
                  meta: {}
                  included: []
      responses:
        '201':
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/RepairResponse"
        '401':
          description: Not Authenticated
        '403':
          description: Forbidden
        '422':
          description: Unprocessable Entity
      security:
        - bearerAuth: []
    parameters: []
  '/repairs/{id}':
    parameters:
      - name: id
        in: path
        description: Break Id
        required: true
        schema:
          type: integer
    get:
      tags:
        - Repairs
      summary: Get a repair
      description: 'Returns an **repair** resource.'
      operationId: showRepair
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/RepairResponse"
        '404':
          description: Repair not found
        '422':
          description: Unprocessable Entity
    delete:
      tags:
        - Repairs
      summary: Delete a repair
      description: 'Delete a **repair** resource.'
      operationId: deleteRepair
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/RepairResponse"
        '401':
          description: Not Authenticated
        '403':
          description: Not Allowed
        '404':
          description: Repair not found
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: integer
            minimum: 1
          name: id
          in: path
          description: ID of the resource
          required: true
    patch:
      summary: Update a repair
      operationId: updateRepair
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/RepairResponse"
        '401':
          description: Unauthenticated
        '403':
          description: Not Allowed
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      description: 'Update an **repair** resource.'
      parameters: []
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/RepairRequest"
            examples:
              Example:
                value:
                  data:
                    - type: repairs
                      id: 1
                      attributes:
                        comment: "I changed the broken screen and now it's ok !"
                      relationships: {}
                      links:
                        self: 'https://api.restorit.fr/repairs/1'
                      meta: {}
                  links: {}
                  meta: {}
                  included: []
      security:
        - bearerAuth: []
      tags:
        - Repairs
  '/breaks':
    get:
      operationId: indexBreaks
      tags:
        - Breaks
      summary: Get a list of breaks
      description: Return a collection of **break** resources.
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
        - schema:
            type: string
          in: query
          name: sort
          description: Comma separated list of fields to sort. Please refer to the JSON API article
        - schema:
            type: array
          in: query
          name: filter
          description: Array of filter. Please refer to the JSON API article
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/BreaksResponse"
        '422':
          description: Unprocessable Entity
    post:
      tags:
        - Breaks
      summary: Store a break
      description: 'Create a **break** resource'
      operationId: storeBreak
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/BreakRequest"
            examples:
              Example:
                value:
                  data:
                    type: breaks
                    attributes:
                      comment: The camera is not working anymore...
      responses:
        '201':
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/BreakResponse"
        '401':
          description: Not Authenticated
        '403':
          description: Forbidden
        '422':
          description: Unprocessable Entity
      security:
        - bearerAuth: []
    parameters: []
  '/breaks/{id}':
    parameters:
      - name: id
        in: path
        description: Break Id
        required: true
        schema:
          type: integer
    get:
      tags:
        - Breaks
      summary: Get a break
      description: 'Returns an **break** resource.'
      operationId: showBreak
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/BreakResponse"
        '404':
          description: Break not found
        '422':
          description: Unprocessable Entity
    delete:
      tags:
        - Breaks
      summary: Delete a break
      description: 'Delete a **break** resource.'
      operationId: deleteBreak
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/BreakResponse"
        '401':
          description: Not Authenticated
        '403':
          description: Not Allowed
        '404':
          description: Break not found
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: integer
            minimum: 1
          name: id
          in: path
          description: ID of the resource
          required: true
    patch:
      summary: Update a break
      operationId: updateBreak
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/BreakResponse"
        '401':
          description: Unauthenticated
        '403':
          description: Not Allowed
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      description: 'Update an **break** resource.'
      parameters: []
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/BreakRequest"
            examples:
              Example:
                  value:
                    data:
                      type: breaks
                      id: 1
                      attributes:
                        comment: The camera is not working anymore...
                      relationships: {}
                      links:
                        self: 'https://api.restorit.fr/breaks/1'
                      meta: {}
                    links: {}
                    meta: {}
                    included: []
      security:
        - bearerAuth: []
      tags:
        - Breaks
  '/criteria':
    get:
      operationId: indexCriteria
      tags:
        - Criteria
      summary: Get a list of criteria
      description: Return a collection of **criterion** resources.
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
        - schema:
            type: string
          in: query
          name: sort
          description: Comma separated list of fields to sort. Please refer to the JSON API article
        - schema:
            type: array
          in: query
          name: filter
          description: Array of filter. Please refer to the JSON API article
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/CriteriaResponse"
        '422':
          description: Unprocessable Entity
    post:
      tags:
        - Criteria
      summary: Store a criterion
      description: 'Create a **criterion** resource'
      operationId: storeCriterion
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/CriterionRequest"
            examples:
              Example:
                description: Here is an example of the body when setting up a selection criterion
                value:
                  data:
                    type: criteria
                    attributes:
                      name: brand
                      priority: 1
      responses:
        '201':
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/CriterionResponse"
        '401':
          description: Not Authenticated
        '403':
          description: Forbidden
        '422':
          description: Unprocessable Entity
      security:
        - bearerAuth: []
    parameters: []
  '/criteria/{id}':
    parameters:
      - name: id
        in: path
        description: Criterion Id
        required: true
        schema:
          type: integer
    get:
      tags:
        - Criteria
      summary: Get a criterion
      description: 'Returns an **criterion** resource.'
      operationId: showCriterion
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/CriterionResponse"
        '404':
          description: Criterion not found
        '422':
          description: Unprocessable Entity
    delete:
      tags:
        - Criteria
      summary: Delete a criterion
      description: 'Delete a **criterion** resource.'
      operationId: deleteCriterion
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/CriterionResponse"
        '401':
          description: Not Authenticated
        '403':
          description: Not Allowed
        '404':
          description: Article not found
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: integer
            minimum: 1
          name: id
          in: path
          description: ID of the resource
          required: true
    patch:
      summary: Update a criterion
      operationId: updateCriterion
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/CriterionResponse"
        '401':
          description: Unauthenticated
        '403':
          description: Not Allowed
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      description: 'Update an **article** resource.'
      parameters: []
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/ArticleRequest"
            examples:
              Example:
                value:
                  data:
                    type: articles
                    attributes:
                      name: Selling an iPhone 7S broken
                      comment: 'Hello, I am selling this iPhone 7S because the screen is broken. Please contact me by email. Thx ! :)'
                      price: 120
                    relationships:
                      images:
                        - data:
                            type: images
                            id: 1
                        - data:
                            type: images
                            id: 2
                      options:
                        - data:
                            type: options
                            id: 45
                        - data:
                            type: options
                            id: 89
      security:
        - bearerAuth: []
      tags:
        - Criteria
  '/articles':
    get:
      operationId: indexArticles
      tags:
        - Articles
      summary: Get a list of articles
      description: Returns a collection of **article** resources.
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
        - schema:
            type: string
          in: query
          name: sort
          description: Comma separated list of fields to sort. Please refer to the JSON API article
        - schema:
            type: array
          in: query
          name: filter
          description: Array of filter. Please refer to the JSON API article
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/ArticlesResponse"
        '422':
          description: Unprocessable Entity
    post:
      tags:
        - Articles
      summary: Store an article
      description: 'Create an **article** resource.'
      operationId: storeArticle
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/ArticleRequest"
            examples:
              Creation of a broken article:
                value:
                  data:
                    type: articles
                    attributes:
                      name: Selling an iPhone 7S broken
                      comment: 'Hello, I am selling this iPhone 7S because the screen is broken. Please contact me by email. Thx ! :)'
                      price: 120
                    relationships:
                      event:
                        data:
                          type: breaks
                          id: 42
                      images:
                        - data:
                            type: images
                            id: 1
                        - data:
                            type: images
                            id: 2
                      options:
                        - data:
                            type: options
                            id: 45
                        - data:
                            type: options
                            id: 89
              Creation of a repaired article:
                value:
                  data:
                    type: articles
                    attributes:
                      name: Selling an iPhone 7S repaired
                      comment: 'Hello, I just repaired the screen of this iPhone 7S!'
                      price: 320
                    relationships:
                      event:
                        data:
                          type: repair
                          id: 109
                      image:
                        - data:
                            type: images
                            id: 1
                        - data:
                            type: images
                            id: 2
                      options:
                        - data:
                            type: options
                            id: 45
                        - data:
                            type: options
                            id: 89
      responses:
        '201':
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/ArticleResponse"
        '401':
          description: Not Authenticated
        '403':
          description: Forbidden
        '422':
          description: Unprocessable Entity
      security:
        - bearerAuth: []
    parameters: []
  '/articles/{id}':
    parameters:
      - name: id
        in: path
        description: Article Id
        required: true
        schema:
          type: integer
    get:
      tags:
        - Articles
      summary: Get an article
      description: 'Returns an **article** resource.'
      operationId: showArticle
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/ArticleResponse"
        '404':
          description: Article not found
        '422':
          description: Unprocessable Entity
    delete:
      tags:
        - Articles
      summary: Delete an article
      description: 'Delete an **article** resource.'
      operationId: deleteArticle
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/ArticleResponse"
        '401':
          description: Not Authenticated
        '403':
          description: Not Allowed
        '404':
          description: Article not found
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: integer
            minimum: 1
          name: id
          in: path
          description: ID of the resource
          required: true
    patch:
      summary: Update an article
      operationId: updateArticle
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/ArticleResponse"
        '401':
          description: Unauthenticated
        '403':
          description: Not Allowed
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      description: 'Update an **article** resource.'
      parameters: []
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/ArticleRequest"
            examples:
              Example:
                value:
                  data:
                    type: articles
                    attributes:
                      name: Selling an iPhone 7S broken
                      comment: 'Hello, I am selling this iPhone 7S because the screen is broken. Please contact me by email. Thx ! :)'
                      price: 120
                    relationships:
                      images:
                        - data:
                            type: images
                            id: 1
                        - data:
                            type: images
                            id: 2
                      options:
                        - data:
                            type: options
                            id: 45
                        - data:
                            type: options
                            id: 89
      security:
        - bearerAuth: []
      tags:
        - Articles
  '/users':
    post:
      tags:
        - Users
      summary: Store a User
      description: 'Create a **user** resource.'
      operationId: storeUser
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        '201':
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        '422':
          description: Unprocessable Entity
    parameters: []
  '/users/{id}':
    parameters:
      - name: id
        in: path
        description: User Id | 'me' | 'self'
        required: true
        schema:
          type: integer
    get:
      tags:
        - Users 
      summary: Get user informations
      description: 'Returns a **user** resource.'
      operationId: showUser
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        '404':
          description: User not found
        '422':
          description: Unprocessable Entity
    patch:
      summary: Update user informations
      operationId: updateUser
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        '401':
          description: Unauthenticated
        '403':
          description: Not Allowed
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      description: 'Update a **user** resource.'
      parameters: []
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      security:
        - bearerAuth: []
      tags:
        - Users
  '/login':
    post:
      tags:
        - Authentication
      summary: Login
      description: Get access token for existing user
      operationId: login
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResource'
        '401':
          description: Invalid credentials
        '422':
          description: Unprocessable Entity
  '/email/resend':
    get:
      tags:
        - Authentication
      summary: Email verification
      description: Ask to receive an email to verify it thanks to a link
      operationId: emailVerification
      responses:
        '200':
          description: "Email verification link sent on your email id"
        '400':
          description: Email already verified.
      security:
        - bearerAuth: []
  '/password/email':
    post:
      tags:
        - Authentication
      summary: Forgot password request
      description: Ask for a reset password link
      operationId: passwordRequest
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: "email where to send the reset link"
      responses:
        '200':
          description: Reset password link sent on your email id.
        '422':
          description: Unprocessable Entity
  '/password/reset':
    post:
      tags:
        - Authentication
      summary: Forgot password reset
      description: Reset a password
      operationId: passwordReset
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: "email"
                token:
                  type: string
                  description: "token (from email)"
                password:
                  type: string
                  description: "new password"
                passwordConfirmation:
                  type: string
                  description: "new password confirmation"
      responses:
        '200':
          description: Password has been successfully changed
        '422':
          description: Unprocessable Entity
        '401':
          description: Invalid token
components:
  schemas:
    AuthRequest:
      title: Auth Request
      type: object
      description: 'This resource represents a login request.'
      x-tags:
        - Authentication
      properties:
        email:
          type: string
          format: email
          example: 'john.smith@gmail.com'
        password:
          type: string
          example: "thisisapassword"
      required:
        - email
        - password
    TokenResource:
      title: Token Resource
      type: object
      x-tags:
        - Authentication
      properties:
        accessToken:
          description: Access token to use for authentication
          type: string
        tokenType:
          description: Token type
          type: string
          example: "Bearer"
        expiresIn:
          description: Expiration Date (TTL)
          type: string
    UserRequest:
      title: User Request
      type: object
      description: 'This resource represents a user in the marketplace.'
      x-tags:
        - Users
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              example: 'users'
              description: 'Type of the resource'
            attributes:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  description: 'Name of the user'
                  example: 'John Smith'
                  minLength: 1
                  maxLength: 64
                displayName:
                  type: string
                  description: 'Display Name of the user'
                  example: 'Johnny'
                  minLength: 1
                  maxLength: 64
                email:
                  type: string
                  format: email
                  description: 'Email of the user'
                  example: 'john.smith@gmail.com'
                  minLength: 1
                  maxLength: 256
                showEmail:
                  type: boolean
                  description: 'If the user want to dislay his email'
                  example: false
                phone:
                  type: string
                  description: 'Phone number of the user'
                  example: '+33612345678'          
                showPhone:
                  type: boolean
                  description: 'If the user want to dislay his phone'
                  example: false
                password:
                  type: string
                  description: 'Password of the user'
                  example: 'thisisapassword'     
                  minLength: 8
                  maxLength: 256   
                passwordConfirmation:
                  type: string
                  description: 'Password of the user repeated (required for the first set of the password and each time the user want to change the mail or the current password'
                  example: 'thisisapassword'     
                  minLength: 8
                  maxLength: 256        
            relationships:
              type: object
              properties:
                avatar: 
                  $ref: '#/components/schemas/ResourceIdentifier'
                address:
                  $ref: '#/components/schemas/ResourceIdentifier'
                articles:
                  $ref: '#/components/schemas/ResourceIdentifierArray'
                evaluations:
                  $ref: '#/components/schemas/ResourceIdentifierArray'
            meta:
              $ref: '#/components/schemas/MetaDataObject'
            links:
              $ref: '#/components/schemas/LinksObject'
          required:
            - type
            - relationships
            - attributes    
      required:
        - data
    UserResponse:
      title: User Response
      type: object
      description: 'This resource represents a user in the marketplace.'
      x-tags:
        - Users
      properties:
        data:
          $ref: "#/components/schemas/UserResource"
        links:
          $ref: '#/components/schemas/LinksObject'
        meta:
          $ref: '#/components/schemas/MetaDataObject'
        included:
          type: array
          description: Array of included relationships. Please refer to the JSON API article
      required:
        - data
        - links
        - meta
    UsersResponse:
      title: Users Response
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/UserResource"
      x-tags:
        - Users
    UserResource:
      type: object
      title: User Resource
      x-tags:
        - Users
      properties:
        type:
          type: string
          example: 'users'
          description: 'Type of the resource'
        id:
          type: integer
          description: 'ID of the resource'
          example: 42
        attributes:
          type: object
          required:
            - name
            - displayName
            - email
            - showEmail
            - phone
            - showPhone
            - emailVerifiedAt
            - deletedAt
            - isMe
            - isBlocked
          properties:
            name:
              type: string
              description: 'Name of the user'
              example: 'John Smith'
              minLength: 1
              maxLength: 64
            displayName:
              type: string
              description: 'Display Name of the user'
              example: 'Johnny'
              minLength: 1
              maxLength: 64
            email:
              type: string
              format: email
              description: 'Email of the user'
              example: 'john.smith@gmail.com'
              minLength: 1
              maxLength: 256
            showEmail:
              type: boolean
              description: 'If the user want to dislay his email'
              example: false
            phone:
              type: string
              description: 'Phone number of the user'
              example: '+33612345678'          
            showPhone:
              type: boolean
              description: 'If the user want to dislay his phone'
              example: false
            isMe:
              type: boolean
              description: 'If the user requested is the one authenticated'
              example: true
            isBlocked:
              type: boolean
              description: 'If the user requested is blocked by the user authenticated'
              example: false
        relationships:
          type: object
          properties:
            avatar: 
              $ref: '#/components/schemas/RelationshipObject'
            address:
              $ref: '#/components/schemas/RelationshipObject'
            articles:
              $ref: '#/components/schemas/RelationshipObject'
            availableArticles:
              $ref: '#/components/schemas/RelationshipObject'
            evaluations:
              $ref: '#/components/schemas/RelationshipObject'
            messages:
              $ref: '#/components/schemas/RelationshipObject'  
            conversations:
              $ref: '#/components/schemas/RelationshipObject'     
            repairedArticles:
              $ref: '#/components/schemas/RelationshipObject'
            negociations:
              $ref: '#/components/schemas/RelationshipObject'
            sales:
              $ref: '#/components/schemas/RelationshipObject' 
            likes:
              $ref: '#/components/schemas/RelationshipObject' 
            blockings:
              $ref: '#/components/schemas/RelationshipObject' 
        meta:
          $ref: '#/components/schemas/MetaDataObject'
        links:
          $ref: '#/components/schemas/LinksObject'
      required:
        - type
        - relationships
        - attributes
    ArticleRequest:
      title: Article Request
      type: object
      description: 'This resource represents an article in the marketplace. It must be linked to a event of type **break** or **repair** to be created.'
      x-tags:
        - Articles
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              example: 'articles'
              description: 'Type of the resource'
            attributes:
              type: object
              required:
                - title
                - comment
                - price
              properties:
                title:
                  type: string
                  description: 'Title of the article'
                  example: 'I sell an iPhone 7S'
                  minLength: 1
                  maxLength: 64
                comment:
                  type: string
                  description: 'More details about the article'
                  example: 'I only want to be contacted by email. Thanks.'
                  minLength: 1
                  maxLength: 2048
                price:
                  type: number
                  description: 'Price of the article'
                  example: 32
                  minimum: 0
                  maximum: 100000
            relationships:
              type: object
              properties:
                options: 
                  $ref: '#/components/schemas/ResourceIdentifierArray'
                event:
                  $ref: '#/components/schemas/ResourceIdentifier'
                images:
                  $ref: '#/components/schemas/ResourceIdentifierArray'
                evaluations:
                  $ref: '#/components/schemas/ResourceIdentifierArray'
                sale:
                  $ref: '#/components/schemas/ResourceIdentifier'
                negociations:
                  $ref: '#/components/schemas/ResourceIdentifierArray'
            meta:
              $ref: '#/components/schemas/MetaDataObject'
            links:
              $ref: '#/components/schemas/LinksObject'
          required:
            - type
            - relationships
            - attributes
      required:
        - data    
    ArticleResponse:
      title: Article Response
      type: object
      description: 'This resource represents an article in the marketplace. It must be linked to a event of type **break** or **repair** to be created.'
      x-tags:
        - Articles
      properties:
        data:
          $ref: "#/components/schemas/ArticleResource"
        links:
          $ref: '#/components/schemas/LinksObject'
        meta:
          $ref: '#/components/schemas/MetaDataObject'
        included:
          type: array
          description: Array of included relationships. Please refer to the JSON API article
      required:
        - data
        - links
        - meta
    ArticlesResponse:
      title: Articles Response
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ArticleResource"
      x-tags:
        - Articles
    ArticleResource:
      type: object
      title: Article Resource
      x-tags:
        - Articles
      properties:
        type:
          type: string
          example: 'articles'
          description: 'Type of the resource'
        id:
          type: integer
          description: 'ID of the resource'
          example: 42
        attributes:
          type: object
          required:
            - title
            - comment
            - price
            - evaluation
            - createdAt
            - updatedAt
            - sold
            - paid
            - broken
            - repair
          properties:
            title:
              type: string
              description: 'Title of the article'
              example: 'I sell an iPhone 7S'
              minLength: 1
              maxLength: 64
            comment:
              type: string
              description: 'More details about the article'
              example: 'I only want to be contacted by email. Thanks.'
              minLength: 1
              maxLength: 2048
            price:
              type: number
              description: 'Price of the article'
              example: 32
              minimum: 0
              maximum: 100000
            evaluation:
              type: object
              description: 'Average evaluation of the article'
              required:
                - cost
                - difficulty
                - count
              properties:
                cost:
                  type: number
                  description: 'Average cost of repair'
                  example: 2.2
                difficulty:
                  type: number
                  description: 'Average difficulty of repair'
                  example: 3.6
                count:
                  type: number
                  description: 'Number of evaluations'
                  example: 15
            broken:
              type: boolean
              description: "True if the article is a broken article"
              example: true
            repair:
              type: boolean
              description: "True if the article is a repaired article"
              example: true              
            sold:
              type: boolean
              description: "True if the article is sold"
              example: false
            paid:
              type: boolean
              description: "True if the article is paid"
              example: false                        
        relationships:
          type: object
          properties:
            options: 
              $ref: '#/components/schemas/RelationshipObject'
            event:
              $ref: '#/components/schemas/RelationshipObject'
            images:
              $ref: '#/components/schemas/RelationshipObject'
            evaluations:
              $ref: '#/components/schemas/RelationshipObject'
            sale:
              $ref: '#/components/schemas/RelationshipObject'
            negociations:
              $ref: '#/components/schemas/RelationshipObject'
            waitingNegociations:
              $ref: '#/components/schemas/RelationshipObject'
            myNegociation:
              $ref: '#/components/schemas/RelationshipObject'  
            declinedNegociations:
              $ref: '#/components/schemas/RelationshipObject'                
            author:
              $ref: '#/components/schemas/RelationshipObject'
            myEvaluation:
              $ref: '#/components/schemas/RelationshipObject'
            likes:
              $ref: '#/components/schemas/RelationshipObject'
        meta:
          $ref: '#/components/schemas/MetaDataObject'
        links:
          $ref: '#/components/schemas/LinksObject'
      required:
        - type
        - relationships
        - attributes
    SaleRequest:
      title: Sale Request
      type: object
      description: 'This resource represents an sale in the marketplace.'
      x-tags:
        - Sales
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              example: 'sales'
              description: 'Type of the resource'
            relationships:
              type: object
              properties:
                negociation: 
                  $ref: '#/components/schemas/ResourceIdentifier'
            meta:
              $ref: '#/components/schemas/MetaDataObject'
            links:
              $ref: '#/components/schemas/LinksObject'
          required:
            - type
            - relationships
      required:
        - data    
    SaleResponse:
      title: Sale Response
      type: object
      description: 'This resource represents a sale.'
      x-tags:
        - Sales
      properties:
        data:
          $ref: "#/components/schemas/SaleResource"
        links:
          $ref: '#/components/schemas/LinksObject'
        meta:
          $ref: '#/components/schemas/MetaDataObject'
        included:
          type: array
          description: Array of included relationships. Please refer to the JSON API article
      required:
        - data
        - links
        - meta
    SalesResponse:
      title: Sales Response
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/SaleResource"
      x-tags:
        - Sales
    SaleResource:
      type: object
      title: Sale Resource
      x-tags:
        - Sales
      properties:
        type:
          type: string
          example: 'sales'
          description: 'Type of the resource'
        id:
          type: integer
          description: 'ID of the resource'
          example: 42
        attributes:
          type: object
          required:
            - createdAt
            - updatedAt
            - paid
            - received
          properties:
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
            paid:
              type: boolean
              description: 'True if the article has been paid'
              example: true
            received:
              type: boolean
              description: 'True if the article has been received'
              example: false              
            paypal:
              type: object
              description: 'Paypal order id only visible for the negociator'
              required:
                - orderId
              properties:
                orderId:
                  type: string
                  description: 'Paypal order id'
                  example: '5O190127TN364715T'
        relationships:
          type: object
          properties:
            seller: 
              $ref: '#/components/schemas/RelationshipObject'
            purchaser:
              $ref: '#/components/schemas/RelationshipObject'
            article:
              $ref: '#/components/schemas/RelationshipObject'
            negociation:
              $ref: '#/components/schemas/RelationshipObject'
        meta:
          $ref: '#/components/schemas/MetaDataObject'
        links:
          $ref: '#/components/schemas/LinksObject'
      required:
        - type
        - relationships
        - attributes
    CriterionRequest:
      title: Criterion Request
      type: object
      description: 'This represents a criterion. **criterion** and **option** resources are used to classify **article** resources in many categories.'
      x-tags:
        - Criteria
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              example: 'criteria'
              description: 'Type of the resource'
            attributes:
              type: object
              required:
                - name
                - priority
              properties:
                name:
                  type: string
                  description: 'Name of the criterion'
                  example: 'brand'
                  minLength: 1
                  maxLength: 64
                priority:
                  type: string
                  description: 'Display priority of the criterion'
                  example: '1'
                  minLength: 0
                  maxLength: 255
            relationships:
              type: object
              properties:
                options: 
                  $ref: '#/components/schemas/ResourceIdentifierArray'
            meta:
              $ref: '#/components/schemas/MetaDataObject'
            links:
              $ref: '#/components/schemas/LinksObject'
          required:
            - type
            - relationships
            - attributes    
      required:
        - data
    CriterionResponse:
      title: Criterion Response
      type: object
      description: 'This represents a criterion. **criterion** and **option** resources are used to classify **article** resources in many categories.'
      x-tags:
        - Criteria
      properties:
        data:
          $ref: "#/components/schemas/CriterionResource"
        links:
          $ref: '#/components/schemas/LinksObject'
        meta:
          $ref: '#/components/schemas/MetaDataObject'
        included:
          type: array
          items:
            anyOf:
              - $ref: "#/components/schemas/OptionResource"
          description: Array of included relationships. Please refer to the JSON API article
      required:
        - data
        - links
        - meta
    CriteriaResponse:
      title: Criteria Response
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CriterionResource"
      x-tags:
        - Criteria
    CriterionResource:
      type: object
      title: Criterion Resource
      x-tags:
        - Criteria
      properties:
        type:
          type: string
          example: 'criteria'
          description: 'Type of the resource'
        id:
          type: integer
          description: 'ID of the resource'
          example: 42
        attributes:
          type: object
          required:
            - name
            - priority
          properties:
            name:
              type: string
              description: 'Name of the criterion'
              example: 'brand'
              minLength: 1
              maxLength: 64
            priority:
              type: string
              description: 'Display priority of the criterion'
              example: '1'
              minLength: 0
              maxLength: 255
        relationships:
          type: object
          properties:
            options: 
              $ref: '#/components/schemas/RelationshipObject'
        meta:
          $ref: '#/components/schemas/MetaDataObject'
        links:
          $ref: '#/components/schemas/LinksObject'
      required:
        - type
        - relationships
        - attributes
    BreakRequest:
      title: Break Request
      type: object
      description: 'This represents a broken object. You need to create one if you want to create a broken object article then.'
      x-tags:
        - Breaks
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              example: 'breaks'
              description: 'Type of the resource'
            attributes:
              type: object
              required:
                - comment
              properties:
                comment:
                  type: string
                  description: 'Comment giving the details of the breakage'
                  example: 'The window is broken and needs a replacement'
                  minLength: 1
                  maxLength: 2048
            relationships:
              type: object
              properties:
                article: 
                  $ref: '#/components/schemas/ResourceIdentifier'
                author: 
                  $ref: '#/components/schemas/ResourceIdentifier'
            meta:
              $ref: '#/components/schemas/MetaDataObject'
            links:
              $ref: '#/components/schemas/LinksObject'
          required:
            - type
            - relationships
            - attributes    
      required:
        - data
    BreakResponse:
      title: Break Response
      type: object
      description: 'This represents a broken object. You need to create one if you want to create a broken object article then.'
      x-tags:
        - Breaks
      properties:
        data:
          $ref: "#/components/schemas/BreakResource"
        links:
          $ref: '#/components/schemas/LinksObject'
        meta:
          $ref: '#/components/schemas/MetaDataObject'
        included:
          type: array
          description: Array of included relationships. Please refer to the JSON API article
      required:
        - data
        - links
        - meta
    BreaksResponse:
      title: Breaks Response
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/BreakResource"
      x-tags:
        - Breaks
    BreakResource:
      type: object
      title: Break Resource
      x-tags:
        - Breaks
      properties:
        type:
          type: string
          example: 'breaks'
          description: 'Type of the resource'
        id:
          type: integer
          description: 'ID of the resource'
          example: 42
        attributes:
          type: object
          required:
            - comment
          properties:
            comment:
              type: string
              description: 'Comment giving the details of the breakage'
              example: 'The window is broken and needs a replacement'
              minLength: 1
              maxLength: 2048
        relationships:
          type: object
          properties:
            author: 
              $ref: '#/components/schemas/RelationshipObject'
            article: 
              $ref: '#/components/schemas/RelationshipObject'
        meta:
          $ref: '#/components/schemas/MetaDataObject'
        links:
          $ref: '#/components/schemas/LinksObject'
      required:
        - type
        - relationships
        - attributes
    RepairRequest:
      title: Repair Request
      type: object
      description: 'This represents a repaired object. You need to create one if you want to create a repaired object article then.'
      x-tags:
        - Repairs
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              example: 'repairs'
              description: 'Type of the resource'
            attributes:
              type: object
              required:
                - comment
              properties:
                comment:
                  type: string
                  description: 'Details of the repair'
                  example: 'I changed the broken screen and now it is ok !'
                  minLength: 1
                  maxLength: 2048
            relationships:
              type: object
              properties:
                article: 
                  $ref: '#/components/schemas/ResourceIdentifier'
                break: 
                  $ref: '#/components/schemas/ResourceIdentifier'
            meta:
              $ref: '#/components/schemas/MetaDataObject'
            links:
              $ref: '#/components/schemas/LinksObject'
          required:
            - type
            - relationships
            - attributes   
      required:
        - data
    RepairResponse:
      title: Repair Response
      type: object
      description: 'This represents a repaired object. You need to create one if you want to create a repaired object article then.'
      x-tags:
        - Repairs
      properties:
        data:
          $ref: "#/components/schemas/RepairResource"
        links:
          $ref: '#/components/schemas/LinksObject'
        meta:
          $ref: '#/components/schemas/MetaDataObject'
        included:
          type: array
          description: Array of included relationships. Please refer to the JSON API article
      required:
        - data
        - links
        - meta
    RepairsResponse:
      title: Repairs Response
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/RepairResource"
      x-tags:
        - Repairs
    RepairResource:
      type: object
      title: Repair Resource
      x-tags:
        - Repairs
      properties:
        type:
          type: string
          example: 'repairs'
          description: 'Type of the resource'
        id:
          type: integer
          description: 'ID of the resource'
          example: 42
        attributes:
          type: object
          required:
            - comment
          properties:
            comment:
              type: string
              description: 'Details of the repair'
              example: 'I changed the broken screen and now it is ok !'
              minLength: 1
              maxLength: 2048
        relationships:
          type: object
          properties:
            break: 
              $ref: '#/components/schemas/RelationshipObject'
            author: 
              $ref: '#/components/schemas/RelationshipObject'
            article: 
              $ref: '#/components/schemas/RelationshipObject'
        meta:
          $ref: '#/components/schemas/MetaDataObject'
        links:
          $ref: '#/components/schemas/LinksObject'
      required:
        - type
        - relationships
        - attributes
    OptionRequest:
      title: Option Request
      type: object
      description: 'This represents a criterion option. **criterion** and **option** resources are used to classify **article** resources in many categories.'
      x-tags:
        - Options
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              example: 'options'
              description: 'Type of the resource'
            attributes:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: 'Name of the option'
                  example: 'Apple'
                  minLength: 1
                  maxLength: 64
            relationships:
              type: object
              properties:
                criterion: 
                  $ref: '#/components/schemas/ResourceIdentifier'
                parents: 
                  $ref: '#/components/schemas/ResourceIdentifierArray'
                children: 
                  $ref: '#/components/schemas/ResourceIdentifierArray'
            meta:
              $ref: '#/components/schemas/MetaDataObject'
            links:
              $ref: '#/components/schemas/LinksObject'
          required:
            - type
            - relationships
            - attributes    
      required:
        - data
    OptionResponse:
      title: Option Response
      type: object
      description: 'This represents a criterion option. **criterion** and **option** resources are used to classify **article** resources in many categories.'
      x-tags:
        - Options
      properties:
        data:
          $ref: "#/components/schemas/OptionResource"
        links:
          $ref: '#/components/schemas/LinksObject'
        meta:
          $ref: '#/components/schemas/MetaDataObject'
        included:
          type: array
          description: Array of included relationships. Please refer to the JSON API article
      required:
        - data
        - links
        - meta
    OptionsResponse:
      title: Options Response
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/OptionResource"
      x-tags:
        - Options
    OptionResource:
      type: object
      title: Option Resource
      x-tags:
        - Options
      properties:
        type:
          type: string
          example: 'options'
          description: 'Type of the resource'
        id:
          type: integer
          description: 'ID of the resource'
          example: 42
        attributes:
          type: object
          required:
            - name
          properties:
            name:
              type: string
              description: 'Name of the option'
              example: 'Apple'
              minLength: 1
              maxLength: 64
        relationships:
          type: object
          properties:
            criterion: 
              $ref: '#/components/schemas/RelationshipObject'
            parents: 
              $ref: '#/components/schemas/RelationshipObject'
            children: 
              $ref: '#/components/schemas/RelationshipObject'
        meta:
          $ref: '#/components/schemas/MetaDataObject'
        links:
          $ref: '#/components/schemas/LinksObject'
      required:
        - type
        - relationships
        - attributes
    EvaluationRequest:
      title: Evaluation Request
      type: object
      description: 'This represents an article evaluation.'
      x-tags:
        - Evaluations
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              example: 'evaluations'
              description: 'Type of the resource'
            attributes:
              type: object
              required:
                - comment
              properties:
                comment:
                  type: string
                  description: 'Comment of the evaluation'
                  example: 'Maybe this is a problem in the graphic card...'
                  minLength: 1
                  maxLength: 2048
                cost:
                  type: integer
                  description: 'Cost of repair on a scale of 0 to 5'
                  example: 2
                  minimum: 0
                  maximum: 5
                difficulty:
                  type: integer
                  description: 'Cost of repair on a scale of 0 to 5'
                  example: 2
                  minimum: 0
                  maximum: 5
            relationships:
              type: object
              properties:
                author: 
                  $ref: '#/components/schemas/ResourceIdentifier'
                article: 
                  $ref: '#/components/schemas/ResourceIdentifier'
            meta:
              $ref: '#/components/schemas/MetaDataObject'
            links:
              $ref: '#/components/schemas/LinksObject'
          required:
            - type
            - relationships
            - attributes   
      required:
        - data
    EvaluationResponse:
      title: Evaluation Response
      type: object
      description: 'This represents an article evaluation.'
      x-tags:
        - Evaluations
      properties:
        data:
          $ref: "#/components/schemas/EvaluationResource"
        links:
          $ref: '#/components/schemas/LinksObject'
        meta:
          $ref: '#/components/schemas/MetaDataObject'
        included:
          type: array
          description: Array of included relationships. Please refer to the JSON API article
      required:
        - data
        - links
        - meta
    EvaluationsResponse:
      title: Evaluations Response
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/EvaluationResource"
      x-tags:
        - Evaluations
    EvaluationResource:
      type: object
      title: Evaluation Resource
      x-tags:
        - Evaluations
      properties:
        type:
          type: string
          example: 'evaluations'
          description: 'Type of the resource'
        id:
          type: integer
          description: 'ID of the resource'
          example: 42
        attributes:
          type: object
          required:
            - comment
            - createdAt
            - updatedAt
            - cost
            - difficulty
          properties:
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
            comment:
              type: string
              description: 'Comment of the evaluation'
              example: 'Maybe this is a problem in the graphic card...'
              minLength: 1
              maxLength: 2048
            cost:
              type: integer
              description: 'Cost of repair on a scale of 0 to 5'
              example: 2
              minimum: 0
              maximum: 5
            difficulty:
              type: integer
              description: 'Cost of repair on a scale of 0 to 5'
              example: 2
              minimum: 0
              maximum: 5
        relationships:
          type: object
          properties:
            author: 
              $ref: '#/components/schemas/RelationshipObject'
            article: 
              $ref: '#/components/schemas/RelationshipObject'
        meta:
          $ref: '#/components/schemas/MetaDataObject'
        links:
          $ref: '#/components/schemas/LinksObject'
      required:
        - type
        - relationships
        - attributes
    NegociationRequest:
      title: Negociation Request
      type: object
      description: 'Represent an article purchase proposition, it can be applied to any article.'
      x-tags:
        - Negociations
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              example: 'negociations'
              description: 'Type of the resource'
            attributes:
              type: object
              required:
                - price
              properties:
                price:
                  type: number
                  minimum: 0
                  maximum: 100000
                  description: The proposed price for the article
                  example: 120
                accepted:
                  type: boolean
            relationships:
              type: object
              properties:
                sale: 
                  $ref: '#/components/schemas/ResourceIdentifier'
                message: 
                  $ref: '#/components/schemas/ResourceIdentifier'
                negociator: 
                  $ref: '#/components/schemas/ResourceIdentifier'
                article: 
                  $ref: '#/components/schemas/ResourceIdentifier'
            meta:
              $ref: '#/components/schemas/MetaDataObject'
            links:
              $ref: '#/components/schemas/LinksObject'
          required:
            - type
            - relationships
            - attributes    
      required:
        - data
    NegociationResponse:
      title: Negociation Response
      type: object
      description: 'Represent an article purchase proposition, it can be applied to any article.'
      x-tags:
        - Negociations
      properties:
        data:
          $ref: "#/components/schemas/NegociationResource"
        links:
          $ref: '#/components/schemas/LinksObject'
        meta:
          $ref: '#/components/schemas/MetaDataObject'
        included:
          type: array
          description: Array of included relationships. Please refer to the JSON API article
      required:
        - data
        - links
        - meta
    NegociationsResponse:
      title: Negociations Response
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/NegociationResource"
      x-tags:
        - Negociations
    NegociationResource:
      type: object
      title: Negociation Resource
      x-tags:
        - Negocations
      properties:
        type:
          type: string
          example: 'negociations'
          description: 'Type of the resource'
        id:
          type: integer
          description: 'ID of the resource'
          example: 42
        attributes:
          type: object
          required:
            - price
            - accepted
            - declined
          properties:
            price:
              type: number
              minimum: 0
              maximum: 100000
              description: The proposed price for the article
              example: 120
            declined:
              type: boolean
              example: false
            accepted:
              type: boolean 
              example: true             
        relationships:
          type: object
          properties:
            negociator: 
              $ref: '#/components/schemas/RelationshipObject'
            article: 
              $ref: '#/components/schemas/RelationshipObject'
            message: 
              $ref: '#/components/schemas/RelationshipObject'
        meta:
          $ref: '#/components/schemas/MetaDataObject'
        links:
          $ref: '#/components/schemas/LinksObject'
      required:
        - type
        - relationships
        - attributes
    MessageRequest:
      title: Message Request
      type: object
      description: 'Represent a message that can be send in a given conversation'
      x-tags:
        - Messages
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              example: 'messages'
              description: 'Type of the resource'
            attributes:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  description: The text of the message
                  example: 'Hello'
                  minLength: 1
                  maxLength: 2048
            relationships:
              type: object
              properties:
                conversation: 
                  $ref: '#/components/schemas/ResourceIdentifier'
                negociation: 
                  $ref: '#/components/schemas/ResourceIdentifier'
                receiver: 
                  $ref: '#/components/schemas/ResourceIdentifier'
                sender: 
                  $ref: '#/components/schemas/ResourceIdentifier'
            meta:
              $ref: '#/components/schemas/MetaDataObject'
            links:
              $ref: '#/components/schemas/LinksObject'
          required:
            - type
            - relationships
            - attributes    
      required:
        - data
    MessageResponse:
      title: Message Response
      type: object
      description: 'Represent a message'
      x-tags:
        - Messages
      properties:
        data:
          $ref: "#/components/schemas/MessageResource"
        links:
          $ref: '#/components/schemas/LinksObject'
        meta:
          $ref: '#/components/schemas/MetaDataObject'
        included:
          type: array
          description: Array of included relationships. Please refer to the JSON API article
      required:
        - data
        - links
        - meta
    MessagesResponse:
      title: Messages Response
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/MessageResource"
      x-tags:
        - Messages
    MessageResource:
      type: object
      title: Message Resource
      x-tags:
        - Messages
      properties:
        type:
          type: string
          example: 'messages'
          description: 'Type of the resource'
        id:
          type: integer
          description: 'ID of the resource'
          example: 42
        attributes:
          type: object
          required:
            - text
            - createdAt
            - updatedAt
          properties:
            text:
              type: string
              description: Text of the message
              example: "Hello"
              minLength: 1
              maxLength: 2048
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time              
        relationships:
          type: object
          properties:
            author: 
              $ref: '#/components/schemas/RelationshipObject'
            negociation: 
              $ref: '#/components/schemas/RelationshipObject'
            conversation:
              $ref: '#/components/schemas/RelationshipObject'
        meta:
          $ref: '#/components/schemas/MetaDataObject'
        links:
          $ref: '#/components/schemas/LinksObject'
      required:
        - type
        - relationships
        - attributes
    ImageRequest:
      title: Image Request
      type: object
      description: 'Represent an image that can be attached to an article or a user'
      x-tags:
        - Images
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              example: 'images'
              description: 'Type of the resource'
            attributes:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  description: Base 64 content of the image
                  example: 'base64ImageContent'
            relationships:
              type: object
              properties:
                imageable: 
                  $ref: '#/components/schemas/ResourceIdentifier'
            meta:
              $ref: '#/components/schemas/MetaDataObject'
            links:
              $ref: '#/components/schemas/LinksObject'
          required:
            - type
            - relationships
            - attributes    
      required:
        - data
    ImageResponse:
      title: Image Response
      type: object
      description: 'Represent an image'
      x-tags:
        - Images
      properties:
        data:
          $ref: "#/components/schemas/ImageResource"
        links:
          $ref: '#/components/schemas/LinksObject'
        meta:
          $ref: '#/components/schemas/MetaDataObject'
        included:
          type: array
          description: Array of included relationships. Please refer to the JSON API article
      required:
        - data
        - links
        - meta
    ImagesResponse:
      title: Images Response
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ImageResource"
      x-tags:
        - Images
    ImageResource:
      type: object
      title: Image Resource
      x-tags:
        - Images
      properties:
        type:
          type: string
          example: 'images'
          description: 'Type of the resource'
        id:
          type: integer
          description: 'ID of the resource'
          example: 42
        attributes:
          type: object
          required:
            - link
          properties:
            link:
              type: string
              description: Link of the image
              example: "https://picsum.photos/200"
        relationships:
          type: object
          properties:
            auhtor:
              $ref: '#/components/schemas/RelationshipObject'
            imageable:
              $ref: '#/components/schemas/RelationshipObject'
        meta:
          $ref: '#/components/schemas/MetaDataObject'
        links:
          $ref: '#/components/schemas/LinksObject'
      required:
        - type
        - relationships
        - attributes
    ConversationRequest:
      title: Conversation Request
      type: object
      description: 'Represent a conversation with a given user'
      x-tags:
        - Conversations
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              example: 'conversations'
              description: 'Type of the resource'
            relationships:
              type: object
              properties:
                user1: 
                  $ref: '#/components/schemas/ResourceIdentifier'
                user2: 
                  $ref: '#/components/schemas/ResourceIdentifier'
            meta:
              $ref: '#/components/schemas/MetaDataObject'
            links:
              $ref: '#/components/schemas/LinksObject'
          required:
            - type
            - relationships
      required:
        - data
    ConversationResponse:
      title: Conversation Response
      type: object
      description: 'Represent a conversation'
      x-tags:
        - Conversations
      properties:
        data:
          $ref: "#/components/schemas/ConversationResource"
        links:
          $ref: '#/components/schemas/LinksObject'
        meta:
          $ref: '#/components/schemas/MetaDataObject'
        included:
          type: array
          description: Array of included relationships. Please refer to the JSON API article
      required:
        - data
        - links
        - meta
    ConversationsResponse:
      title: Conversations Response
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ConversationResource"
      x-tags:
        - Conversations
    ConversationResource:
      type: object
      title: Conversation Resource
      x-tags:
        - Conversations
      properties:
        type:
          type: string
          example: 'conversation'
          description: 'Type of the resource'
        id:
          type: integer
          description: 'ID of the resource'
          example: 42
        attributes:
          type: object
          required:
            - createdAt
            - updatedAt
          properties:
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
        relationships:
          type: object
          properties:
            users: 
              $ref: '#/components/schemas/RelationshipObject'
            lastMessage: 
              $ref: '#/components/schemas/RelationshipObject'
            messages:
              $ref: '#/components/schemas/RelationshipObject'
        meta:
          $ref: '#/components/schemas/MetaDataObject'
        links:
          $ref: '#/components/schemas/LinksObject'
      required:
        - type
        - relationships
        - attributes
    BlockingRequest:
      title: Blocking Request
      type: object
      description: 'Represent a blocking between 2 users'
      x-tags:
        - Blockings
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              example: 'blockings'
              description: 'Type of the resource'
            relationships:
              type: object
              properties:
                blockedUser: 
                  $ref: '#/components/schemas/ResourceIdentifier'
            meta:
              $ref: '#/components/schemas/MetaDataObject'
            links:
              $ref: '#/components/schemas/LinksObject'
          required:
            - type
            - relationships
      required:
        - data
    BlockingResponse:
      title: Blocking Response
      type: object
      description: 'Represent a blocking'
      x-tags:
        - Blockings
      properties:
        data:
          $ref: "#/components/schemas/BlockingResource"
        links:
          $ref: '#/components/schemas/LinksObject'
        meta:
          $ref: '#/components/schemas/MetaDataObject'
        included:
          type: array
          description: Array of included relationships. Please refer to the JSON API article
      required:
        - data
        - links
        - meta
    BlockingsResponse:
      title: Blockings Response
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/BlockingResource"
      x-tags:
        - Blockings
    BlockingResource:
      type: object
      title: Blocking Resource
      x-tags:
        - Blockings
      properties:
        type:
          type: string
          example: 'blockings'
          description: 'Type of the resource'
        id:
          type: integer
          description: 'ID of the resource'
          example: 42
        attributes:
          type: object
          required:
            - createdAt
            - updatedAt
          properties:
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
        relationships:
          type: object
          properties:
            user: 
              $ref: '#/components/schemas/RelationshipObject'
            blockedUser: 
              $ref: '#/components/schemas/RelationshipObject'
        meta:
          $ref: '#/components/schemas/MetaDataObject'
        links:
          $ref: '#/components/schemas/LinksObject'
      required:
        - type
        - relationships
        - attributes
    LikeRequest:
      title: Like Request
      type: object
      description: 'Represent a like on an article'
      x-tags:
        - Likes
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              example: 'likes'
              description: 'Type of the resource'
            relationships:
              type: object
              properties:
                article: 
                  $ref: '#/components/schemas/ResourceIdentifier'
            meta:
              $ref: '#/components/schemas/MetaDataObject'
            links:
              $ref: '#/components/schemas/LinksObject'
          required:
            - type
            - relationships
      required:
        - data
    LikeResponse:
      title: Like Response
      type: object
      description: 'Represent a like'
      x-tags:
        - Likes
      properties:
        data:
          $ref: "#/components/schemas/LikeResource"
        links:
          $ref: '#/components/schemas/LinksObject'
        meta:
          $ref: '#/components/schemas/MetaDataObject'
        included:
          type: array
          description: Array of included relationships. Please refer to the JSON API article
      required:
        - data
        - links
        - meta
    LikesResponse:
      title: Likes Response
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/LikeResource"
      x-tags:
        - Likes
    LikeResource:
      type: object
      title: Like Resource
      x-tags:
        - Likes
      properties:
        type:
          type: string
          example: 'likes'
          description: 'Type of the resource'
        id:
          type: integer
          description: 'ID of the resource'
          example: 42
        attributes:
          type: object
          required:
            - createdAt
            - updatedAt
          properties:
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
        relationships:
          type: object
          properties:
            user: 
              $ref: '#/components/schemas/RelationshipObject'
            article: 
              $ref: '#/components/schemas/RelationshipObject'
        meta:
          $ref: '#/components/schemas/MetaDataObject'
        links:
          $ref: '#/components/schemas/LinksObject'
      required:
        - type
        - relationships
        - attributes
    MetaDataObject:
      type: object
      x-tags:
        - Json Api
      description: 'Meta Data of the resource'
    RelationshipObject:
      type: object
      x-tags:
        - Json Api
      description: 'Relationship resource'
      properties:
        links:
          $ref: '#/components/schemas/LinksObject'
        data:
          oneOf:
            - $ref: '#/components/schemas/ResourceIdentifier'
            - $ref: '#/components/schemas/ResourceIdentifierArray'
        meta:
          $ref: '#/components/schemas/MetaDataObject'
    LinksObject:
      type: object
      x-tags:
        - Json Api
      properties:
        self:
          type: string
        related:
          type: object
          properties:
            href:
              type: string
              description: 'a string containing the link‚Äôs URL.'
            meta:
              $ref: '#/components/schemas/MetaDataObject'
    ResourceIdentifier:
      type: object
      x-tags:
        - Json Api
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              example: 'articles'
            id:
              type: number
              example: 42
        meta:
           $ref: '#/components/schemas/MetaDataObject'
      required:
        - type
        - id
    ResourceIdentifierArray:
      type: array
      x-tags:
        - Json Api
      items:
        $ref: '#/components/schemas/ResourceIdentifier'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
    