openapi: 3.0.0
info:
  title: "Restor'It"
  description: "The documentation of Restor'It API"
  contact:
    email: clement@sanchez.sh
    name: Cl√©ment SANCHEZ
  version: '2.0'
servers:
  - url: 'https://v2.api.restorit.fr'
    description: Production
  - url: 'http://localhost:8000'
    description: Development
tags:
  - Oui
paths:
  '/articles':
    get:
      tags:
        - Articles
      summary: Get a list of articles
      description: 'Returns a collection of **article** resources.'
      operationId: indexArticles
      parameters:
        - schema:
            type: string
            maxLength: 0
            minLength: 1
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
        - schema:
            type: string
          in: query
          name: sort
          description: Comma separated list of fields to sort. Please refer to the JSON API article
        - schema:
            type: array
          in: query
          name: filter
          example: 'filter[price][<=]=50'
          description: Array of filter. Please refer to the JSON API article
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Article'
                  meta:
                    type: object
                    description: Metadata of the collection
                  links:
                    type: object
                    description: Links related to the collection
                  included:
                    type: array
                    description: Array of included relationships. Please refer to the JSON API article
                    items: {}
                required:
                  - data
                  - meta
                  - links
                  - included
        '422':
          description: Unprocessable Entity
    post:
      tags:
        - Articles
      summary: Store an article
      description: 'Create an **article** resource.'
      operationId: storeArticle
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: ''
                  properties:
                    type:
                      type: string
                      description: Type of the resource created
                      example: articles
                      minLength: 1
                    attributes:
                      type: object
                      description: ''
                      required:
                        - title
                        - comment
                        - price
                      properties:
                        title:
                          type: string
                          description: Title of the article
                          example: Selling an iPhone 7S
                          minLength: 1
                          maxLength: 64
                        comment:
                          type: string
                          example: 'Hello, I am selling this iPhone 7S because the screen is broken. Please contact me by email. Thx ! :)'
                          minLength: 1
                          maxLength: 2048
                          description: Details of the articles
                        price:
                          type: integer
                          description: Price of the article
                          example: '320'
                          minimum: 0
                          maximum: 100000
                    relationships:
                      type: object
                      description: ''
                      required:
                        - event
                      properties:
                        event:
                          description: 'Event linked to this article, it must be a **repair** or a **break** resource'
                          type: object
                          required:
                            - type
                            - id
                          properties:
                            type:
                              type: string
                              enum:
                                - breaks
                                - repairs
                              description: Type of the resource to link
                            id:
                              type: integer
                              description: ID of the resource to link
                        images:
                          type: array
                          description: Images linked to this article
                          items:
                            $ref: ../models/image.v1.yaml
                        options:
                          type: array
                          description: Selected criterion options linked to this article
                          items:
                            $ref: ../models/option.v1.yaml
                  required:
                    - type
                    - attributes
                    - relationships
                include:
                  type: string
                  description: Comma separated list of relationships to include. Please refer to the JSON API article
            examples:
              Creation of a broken article:
                value:
                  data:
                    type: articles
                    atributes:
                      name: Selling an iPhone 7S broken
                      comment: 'Hello, I am selling this iPhone 7S because the screen is broken. Please contact me by email. Thx ! :)'
                      price: 120
                    relationships:
                      event:
                        data:
                          type: breaks
                          id: 42
                      image:
                        - data:
                            type: images
                            id: 1
                        - data:
                            type: images
                            id: 2
                      options:
                        - data:
                            type: options
                            id: 45
                        - data:
                            type: options
                            id: 89
              Creation of a repaired article:
                value:
                  data:
                    type: articles
                    atributes:
                      name: Selling an iPhone 7S repaired
                      comment: 'Hello, I just repaired the screen of this iPhone 7S!'
                      price: 320
                    relationships:
                      event:
                        data:
                          type: repair
                          id: 109
                      image:
                        - data:
                            type: images
                            id: 1
                        - data:
                            type: images
                            id: 2
                      options:
                        - data:
                            type: options
                            id: 45
                        - data:
                            type: options
                            id: 89
      responses:
        '201':
          description: Created
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Article'
                  links:
                    type: object
                    description: Links related to the response
                  meta:
                    type: object
                    description: Metadata of the response
                  included:
                    type: string
                    description: Array of included relationships. Please refer to the JSON API article
                required:
                  - data
                  - links
                  - meta
              examples:
                Broken article:
                  value:
                    data:
                      id: 45
                      type: articles
                      atributes:
                        createdAt: '2020-01-01 00:00:00'
                        updatedAt: '2020-01-01 00:00:00'
                        name: Selling an iPhone 7S broken
                        comment: 'Hello, I am selling this iPhone 7S because the screen is broken. Please contact me by email. Thx ! :)'
                        price: 120
                        broken: true
                      links:
                        self: 'https://api.restorit.fr/articles/45'
                      meta: {}
                    links: {}
                    meta: {}
                    included: {}
                Repaired article:
                  value:
                    data:
                      id: 46
                      type: articles
                      atributes:
                        createdAt: '2020-01-01 00:00:00'
                        updatedAt: '2020-01-01 00:00:00'
                        name: Selling an iPhone 7S repaired
                        comment: 'Hello, I just repaired the screen of this iPhone 7S!'
                        price: 320
                        broken: false
                      links:
                        self: 'https://api.restorit.fr/articles/46'
                      meta: {}
                    links: {}
                    meta: {}
                    included: {}
        '401':
          description: Not Authenticated
        '403':
          description: Forbidden
        '422':
          description: Unprocessable Entity
      security:
        - bearerAuth: []
    parameters: []
  '/articles/{id}':
    get:
      tags:
        - Articles
      summary: Get an article
      description: 'Returns an **article** resource.'
      operationId: showArticle
      parameters:
        - name: articleId
          in: path
          description: Article Id
          required: true
          schema:
            type: integer
        - schema:
            type: string
            maxLength: 1
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
        - schema:
            type: string
          in: header
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Article'
                  links:
                    type: object
                    description: Links related to the response
                  meta:
                    type: object
                    description: Metadata of the response
                  included:
                    type: array
                    description: Array of included relationships. Please refer to the JSON API article
                    items: {}
                required:
                  - data
                  - links
                  - meta
              examples:
                Example:
                  value:
                    data:
                      id: 1
                      type: articles
                      atributes:
                        createdAt: '2020-01-01 00:00:00'
                        updatedAt: '2020-01-01 00:00:00'
                        name: Selling an iPhone 7S broken
                        comment: 'Hello, I am selling this iPhone 7S because the screen is broken. Please contact me by email. Thx ! :)'
                        price: 120
                        broken: true
                      links:
                        self: 'https://api.restorit.fr/articles/1'
                      meta: {}
                    links: {}
                    meta: {}
                    included: []
        '404':
          description: Article not found
        '422':
          description: Unprocessable Entity
      requestBody:
        description: ''
    delete:
      tags:
        - Articles
      summary: Delete an article
      description: 'Delete an **article** resource.'
      operationId: deleteArticle
      parameters:
        - name: articleId
          in: path
          description: Article Id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    description: Metadata of the response
                required:
                  - meta
              examples:
                Example:
                  value:
                    meta: {}
        '401':
          description: Not Authenticated
        '403':
          description: Not Allowed
        '404':
          description: Article not found
        '422':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleResource'
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                include:
                  type: object
                  description: Comma separated list of relationships to include. Please refer to the JSON API article
        description: ''
    parameters:
      - schema:
          type: integer
          minimum: 1
        name: id
        in: path
        description: ID of the resource
        required: true
    patch:
      summary: Update an article
      operationId: updateArticle
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Article'
                  links:
                    type: object
                    description: Links related to the resource
                  meta:
                    description: Metadata of the resource
                    type: object
                  included:
                    type: array
                    description: Array of included relationships. Please refer to the JSON API article
                    items: {}
                required:
                  - data
                  - links
                  - meta
                  - included
              examples:
                Example:
                  value:
                    data:
                      id: 1
                      type: articles
                      atributes:
                        createdAt: '2020-01-01 00:00:00'
                        updatedAt: '2020-01-01 00:00:00'
                        name: Selling an iPhone 7S broken
                        comment: 'Hello, I am selling this iPhone 7S because the screen is broken. Please contact me by email. Thx ! :)'
                        price: 120
                        broken: true
                      links:
                        self: 'https://api.restorit.fr/articles/1'
                      meta: {}
                    links: {}
                    meta: {}
                    included: []
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      description: 'Update an **article** resource.'
      parameters: []
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: ''
                  required:
                    - type
                  properties:
                    type:
                      type: string
                      description: Type of the resource to update
                      example: articles
                      minLength: 1
                    attributes:
                      type: object
                      description: ''
                      properties:
                        title:
                          type: string
                          description: Title of the article
                          example: Selling an iPhone 7S
                          minLength: 1
                          maxLength: 64
                        comment:
                          type: string
                          example: 'Hello, I am selling this iPhone 7S because the screen is broken. Please contact me by email. Thx ! :)'
                          minLength: 1
                          maxLength: 2048
                          description: Details of the articles
                        price:
                          type: integer
                          description: Price of the article
                          example: '320'
                          minimum: 0
                          maximum: 100000
                    relationships:
                      type: object
                      description: ''
                      properties:
                        images:
                          type: array
                          description: Images linked to this article
                          items:
                            $ref: ../models/image.v1.yaml
                        options:
                          type: array
                          description: Selected criterion options linked to this article
                          items:
                            $ref: ../models/option.v1.yaml
                include:
                  type: string
                  description: Comma separated list of relationships to include. Please refer to the JSON API article
                  minLength: 1
              required:
                - data
            examples:
              Example:
                value:
                  data:
                    type: articles
                    atributes:
                      name: Selling an iPhone 7S broken
                      comment: 'Hello, I am selling this iPhone 7S because the screen is broken. Please contact me by email. Thx ! :)'
                      price: 120
                    relationships:
                      image:
                        - data:
                            type: images
                            id: 1
                        - data:
                            type: images
                            id: 2
                      options:
                        - data:
                            type: options
                            id: 45
                        - data:
                            type: options
                            id: 89
      security:
        - bearerAuth: []
      tags:
        - Articles
  '/users/{id}/articles':
    get:
      tags:
        - Articles
      summary: Get user articles
      description: "Retrieve user's articles"
      operationId: "App\\Http\\Controllers\\ArticlesController::getUserArticles"
      parameters:
        - name: userId
          in: path
          description: "User Id | 'me' | 'self'"
          required: true
          schema:
            type: string
        - name: filter
          in: query
          description: Filter parameters
          required: false
          schema:
            $ref: '#/components/schemas/SearchArticlesRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticlesCollectionResource'
        '404':
          description: User not found
  '/users/{id}/sales':
    get:
      tags:
        - Users
      summary: Get user sales
      description: "Retrieve user's sales"
      operationId: "App\\Http\\Controllers\\ArticlesController::getUserSales"
      parameters:
        - name: userId
          in: path
          description: "User Id | 'me' | 'self'"
          required: true
          schema:
            type: string
        - name: filter
          in: query
          description: Filter parameters
          required: false
          schema:
            $ref: '#/components/schemas/SearchUserSalesRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticlesCollectionResource'
        '402':
          description: Not allowed
        '404':
          description: User not found
      security:
        - bearerAuth: []
  '/users/{id}/purchases':
    get:
      tags:
        - Users
      summary: Get user purchases
      description: "Retrieve user's purchases"
      operationId: "App\\Http\\Controllers\\ArticlesController::getUserPurchases"
      parameters:
        - name: userId
          in: path
          description: "User Id | 'me' | 'self'"
          required: true
          schema:
            type: string
        - name: filter
          in: query
          description: Filter parameters
          required: false
          schema:
            $ref: '#/components/schemas/SearchUserPurchasesRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticlesCollectionResource'
        '403':
          description: Not allowed
        '404':
          description: User not found
      security:
        - bearerAuth: []
  '/auth/login':
    post:
      tags:
        - Authentication
      summary: Login
      description: Get access token for existing user
      operationId: "App\\Http\\Controllers\\AuthController::login"
      requestBody:
        description: Data required to login
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: Success
        '401':
          description: Invalid credentials
        '422':
          description: Unprocessable Entity
  '/auth/logout':
    get:
      tags:
        - Authentication
      summary: Logout user
      description: "Revoke user's token validity"
      operationId: "App\\Http\\Controllers\\AuthController::logout"
      responses:
        '200':
          description: Successfully logged out
        '404':
          description: User not found
      security:
        - bearerAuth: []
  '/evaluations':
    post:
      tags:
        - Evaluations
      summary: Store an evaluation
      description: 'Create an **evaluation** resource.'
      operationId: storeEvaluation
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  required:
                    - type
                    - relationships
                  properties:
                    type:
                      type: string
                      enum:
                        - evaluations
                    attributes:
                      type: object
                      properties:
                        comment:
                          type: string
                          minLength: 1
                          maxLength: 2048
                        cost:
                          type: integer
                          minimum: 1
                          maximum: 5
                        difficulty:
                          type: integer
                          minimum: 1
                          maximum: 5
                    relationships:
                      type: object
                      required:
                        - article
                      properties:
                        article:
                          type: object
                          description: The article to link this evaluation to
                          required:
                            - data
                          properties:
                            data:
                              type: object
                              required:
                                - type
                                - id
                              properties:
                                type:
                                  type: string
                                  enum:
                                    - articel
                                id:
                                  type: integer
                included:
                  type: string
              required:
                - data
            examples:
              Example:
                value:
                  data:
                    type: evaluations
                    attributes:
                      comment: Maybe this is a problem in the graphic card...
                      cost: 4
                      difficulty: 1
                    relationships:
                      article:
                        data:
                          type: articles
                          id: 1
      responses:
        '201':
          description: Created
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Evaluation'
                  links:
                    type: object
                  meta:
                    type: object
                  included:
                    type: array
                    items: {}
              examples:
                Example:
                  value:
                    data:
                      type: evaluations
                      id: 1
                      attributes:
                        createdAt: '2020-02-02 00:0:00'
                        updatedAt: '2020-02-02 00:0:00'
                        comment: Maybe this is a problem in the graphic card...
                        cost: 4
                        difficulty: 1
                      relationships: {}
                      links:
                        self: 'https://api.restorit.fr/evaluations/1'
                      meta: {}
                    links: {}
                    meta: {}
                    included: []
        '401':
          description: Not Authenticated
        '403':
          description: Not Allowed
        '422':
          description: Unprocessable Entity
      security:
        - bearerAuth: []
    parameters: []
    get:
      summary: Get a list of evaluations
      operationId: indexEvaluations
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Evaluation'
                  links:
                    type: string
                  meta:
                    type: string
                  included:
                    type: string
              examples:
                Example:
                  value:
                    data:
                      - type: evaluations
                        id: 1
                        attributes:
                          createdAt: '2020-02-02 00:0:00'
                          updatedAt: '2020-02-02 00:0:00'
                          comment: Maybe this is a problem in the graphic card...
                          cost: 4
                          difficulty: 1
                        relationships: {}
                        links:
                          self: 'https://api.restorit.fr/evaluations/1'
                        meta: {}
                    links:
                      first: 'https://api.restorit.fr/repairs'
                      prev: null
                      self: 'https://api.restorit.fr/repairs'
                      next: null
                      last: 'https://api.restorit.fr/repairs'
                    meta:
                      pageNumber: 1
                      pageSize: 50
                      size: 1
                      totalSize: 1
                      totalPage: 1
                    included: []
        '422':
          description: Unprocessable Entity
      tags:
        - Evaluations
      description: 'Return a collection of **evaluation** resources.'
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
        - schema:
            type: string
          in: query
          name: sort
          description: Comma separated list of fields to sort. Please refer to the JSON API article
        - schema:
            type: array
          in: query
          name: filter
          description: Array of filter. Please refer to the JSON API article
  '/users/{id}/evaluations':
    get:
      tags:
        - Evaluations
      summary: Get user evaluations
      description: "Retrieve user's evaluations"
      operationId: "App\\Http\\Controllers\\EvaluationsController::getUserEvaluations"
      parameters:
        - name: userId
          in: path
          description: "User Id | 'me' | 'self'"
          required: true
          schema:
            type: string
        - name: filter
          in: query
          description: Filter parameters
          required: false
          schema:
            $ref: '#/components/schemas/SearchUserEvaluationsRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationsCollectionResource'
        '404':
          description: User not found
  '/messages':
    post:
      tags:
        - Messages
      summary: Send a message
      description: Send a message to a specific user
      operationId: "App\\Http\\Controllers\\MessagesController::postMessage"
      requestBody:
        description: Data required to send a message
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostMessageRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResource'
      security:
        - bearerAuth: []
  '/messages/{id}':
    put:
      tags:
        - Messages
      summary: Edit a message
      description: Edit a specific message
      operationId: "App\\Http\\Controllers\\MessagesController::updateMessage"
      requestBody:
        description: Data required to edit a message
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMessageRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResource'
      security:
        - bearerAuth: []
  '/users/{id}/conversation':
    get:
      tags:
        - Messages
      summary: Get conversation with user
      description: Retrieve conversation with a specific user
      operationId: "App\\Http\\Controllers\\MessagesController::getConversationWithUser"
      parameters:
        - name: userId
          in: path
          description: "User Id | 'me' | 'self'"
          required: true
          schema:
            type: string
        - name: filter
          in: query
          description: Filter parameters
          required: false
          schema:
            $ref: '#/components/schemas/GetConversationRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagesCollectionResource'
        '404':
          description: User not found
      security:
        - bearerAuth: []
  '/conversations/{id}':
    get:
      tags:
        - Messages
      summary: Get conversation
      description: Retrieve conversation by id
      operationId: "App\\Http\\Controllers\\MessagesController::getConversation"
      parameters:
        - name: conversationId
          in: path
          description: Conversation Id
          required: true
          schema:
            type: integer
        - name: filter
          in: query
          description: Filter parameters
          required: false
          schema:
            $ref: '#/components/schemas/GetConversationRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagesCollectionResource'
        '404':
          description: Conversation not found
      security:
        - bearerAuth: []
  '/conversations':
    get:
      tags:
        - Conversations
      summary: Get a list of conversations
      description: 'Returns a collection of **conversation** resources.'
      operationId: indexConversations
      parameters:
        - schema:
            type: string
            maxLength: 0
            minLength: 1
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
        - schema:
            type: string
          in: query
          name: sort
          description: Comma separated list of fields to sort. Please refer to the JSON API article
        - schema:
            type: array
          in: query
          name: filter
          example: 'filter[price][<=]=50'
          description: Array of filter. Please refer to the JSON API article
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Conversation'
                  meta:
                    type: object
                    description: Metadata of the collection
                  links:
                    type: object
                    description: Links related to the collection
                  included:
                    type: array
                    description: Array of included relationships. Please refer to the JSON API article
                    items: {}
                required:
                  - data
                  - meta
                  - links
                  - included
        '422':
          description: Unprocessable Entity
        '401':
          description: Not Authenticated
      security:
        - bearerAuth: []
  '/users/{id}/block':
    post:
      tags:
        - Messages
      summary: Block user
      description: Block messages from a given user
      operationId: "App\\Http\\Controllers\\MessagesController::blockUser"
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResource'
        '404':
          description: User not found
        '422':
          description: Cet utilisateur est d√©j√† bloqu√©
      security:
        - bearerAuth: []
    delete:
      tags:
        - Messages
      summary: Unblock user
      description: Unblock messages from a given user
      operationId: "App\\Http\\Controllers\\MessagesController::unblockUser"
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResource'
        '404':
          description: User not found
        '422':
          description: "Cet utilisateur n'est pas bloqu√©"
      security:
        - bearerAuth: []
  '/users/{id}':
    get:
      tags:
        - Users
      summary: Get user informations
      description: "Retrieve informations from user's token if valid"
      operationId: "App\\Http\\Controllers\\UsersController::getUser"
      parameters:
        - name: userId
          in: path
          description: "User Id | 'me' | 'self'"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResource'
        '404':
          description: User not found
      security:
        - bearerAuth: []
    put:
      tags:
        - Users
      summary: Update user informations
      description: Change user informations and visibilty of email and phone
      operationId: "App\\Http\\Controllers\\UsersController::updateUser"
      parameters:
        - name: userId
          in: path
          description: "User Id | 'me' | 'self'"
          required: true
          schema:
            type: string
      requestBody:
        description: Data required to update a user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResource'
        '401':
          description: Not Authenticated
        '403':
          description: Not Allowed
        '404':
          description: User not found
        '422':
          description: Unprocessable Entity
      security:
        - bearerAuth: []
  '/users':
    post:
      tags:
        - Users
      summary: Create User
      description: Create a new user
      operationId: "App\\Http\\Controllers\\UsersController::createUser"
      requestBody:
        description: Data required to create a user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResource'
        '422':
          description: Unprocessable Entity
  '/criteria':
    post:
      summary: Store a criterion
      operationId: storeCriterion
      tags:
        - Criteria
      security:
        - bearerAuth: []
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  required:
                    - type
                    - attributes
                  properties:
                    type:
                      type: string
                      description: Type of the created resource
                      enum:
                        - criteria
                    attributes:
                      type: object
                      required:
                        - name
                        - priority
                      properties:
                        name:
                          type: string
                          minLength: 1
                          maxLength: 64
                          description: Name of the criterion
                        priority:
                          type: string
                          minLength: 0
                          maxLength: 255
                          description: Display priority of the criterion
                include:
                  type: string
                  description: Comma separated list of relationships to include. Please refer to the JSON API article
              required:
                - data
            examples:
              Example:
                description: Here is an example of the body when setting up a selection criterion
                value:
                  data:
                    type: criteria
                    attributes:
                      name: brand
                      priority: 1
      responses:
        '201':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Criterion'
                  links:
                    type: object
                    description: Links related to the response
                  meta:
                    type: object
                    description: Metadata of the response
                  included:
                    type: array
                    description: Array of included relationships. Please refer to the JSON API article
                    items: {}
                required:
                  - data
                  - links
                  - meta
              examples:
                Example:
                  value:
                    data:
                      type: criteria
                      id: 1
                      attributes:
                        name: brand
                        priority: 1
                      relationships: {}
                      links:
                        self: 'https://api.restorit.fr/criteria/1'
                      meta: {}
                    links: {}
                    meta: {}
                    included: []
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '422':
          description: Unprocessable Entity
      description: 'Create a **criterion** resource'
    parameters: []
    get:
      summary: Get a list of criteria
      operationId: indexCriteria
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Criterion'
                  links:
                    description: Links related to the response
                    type: object
                  meta:
                    description: Metadata of the response
                    type: object
                  included:
                    type: string
                    description: Array of included relationships. Please refer to the JSON API article
                required:
                  - data
                  - links
                  - meta
              examples:
                Example:
                  value:
                    data:
                      - type: criteria
                        id: 1
                        attributes:
                          name: brand
                          priority: 1
                        relationships: {}
                        links:
                          self: 'https://api.restorit.fr/criteria/1'
                        meta: {}
                    links:
                      first: 'https://api.restorit.fr/criteria'
                      prev: null
                      self: 'https://api.restorit.fr/criteria'
                      next: null
                      last: 'https://api.restorit.fr/criteria'
                    meta:
                      pageNumber: 1
                      pageSize: 50
                      size: 1
                      totalSize: 1
                      totalPage: 1
                    included: []
        '422':
          description: Unprocessable Entity
      description: 'Return a collection of **criterion** resources.'
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
        - schema:
            type: string
          in: query
          name: sort
          description: Comma separated list of fields to sort. Please refer to the JSON API article
        - schema:
            type: array
          in: query
          name: filter
          description: Array of filter. Please refer to the JSON API article
      tags:
        - Criteria
  '/criteria/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get a criterion
      operationId: showCriterion
      tags:
        - Criteria
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application.vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Criterion'
                  links:
                    description: Links related to the response
                    type: object
                  meta:
                    description: Metadata of the response
                    type: object
                  included:
                    type: string
                    description: Array of included relationships. Please refer to the JSON API article
                required:
                  - data
                  - links
                  - meta
              examples:
                Example:
                  description: When showing a selection criterion
                  value:
                    data:
                      type: criteria
                      id: 1
                      attributes:
                        name: brand
                        priority: 1
                      relationships: {}
                      links:
                        self: 'https://api.restorit.fr/criteria/1'
                      meta: {}
                    links: {}
                    meta: {}
                    included: []
        '404':
          description: Model not found.
        '422':
          description: Invalid form.
      description: 'Return a **criterion** resource.'
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
    patch:
      summary: Update a criterion
      operationId: updateCriterion
      tags:
        - Criteria
      security:
        - bearerAuth: []
      requestBody:
        description: ''
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  required:
                    - type
                  properties:
                    type:
                      type: string
                      description: Type of the updated resource
                      enum:
                        - criteria
                    attributes:
                      type: object
                      properties:
                        name:
                          type: string
                          description: Name of the criterion
                        priority:
                          type: integer
                          description: Display priority of the criterion
                include:
                  type: string
                  description: Comma separated list of relationships to include. Please refer to the JSON API article
              required:
                - data
            examples:
              Example:
                description: When updating a selection criterion
                value:
                  data:
                    type: criteria
                    attributes:
                      name: brand
                      priority: 1
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Criterion'
                  links:
                    type: object
                    description: Links related to the response
                  meta:
                    type: object
                    description: Metadata of the response
                  included:
                    type: array
                    description: Array of included relationships. Please refer to the JSON API article
                    items: {}
                required:
                  - data
                  - links
                  - meta
              examples:
                Example:
                  description: When updating a selection criterion
                  value:
                    data:
                      type: criteria
                      id: 1
                      attributes:
                        name: brand
                        priority: 1
                      relationships: {}
                      links:
                        self: 'https://api.restorit.fr/criteria/1'
                      meta: {}
                    links: {}
                    meta: {}
                    included: []
        '401':
          description: 'Unauthenticated, you must be authenticated to access this.'
        '403':
          description: 'Access forbidden, you must be admin to access this.'
        '404':
          description: Model not found.
        '422':
          description: Invalid form.
      description: 'Update a **criterion** resource.'
    delete:
      summary: Delete a criterion
      operationId: deleteCriterion
      tags:
        - Criteria
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A successful response
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    description: Metadata of the response
                required:
                  - meta
              examples:
                Example:
                  value:
                    meta: {}
        '400':
          description: Occurs when an article belongs to this criterion.
        '401':
          description: 'Unauthenticated, you must be authenticated to access this.'
        '403':
          description: 'Access forbidden, you must be admin to access this.'
        '404':
          description: Model not found.
      description: 'Delete a **criterion** resource.'
  '/breaks':
    get:
      summary: Get a list of breaks
      tags:
        - Break
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Repair'
                  links:
                    type: object
                    description: Links related to the response
                  meta:
                    type: object
                    description: Metadata of the response
                  included:
                    type: array
                    description: Array of included relationships. Please refer to the JSON API article
                    items: {}
                required:
                  - data
                  - links
                  - meta
              examples:
                Example:
                  value:
                    data:
                      - type: breaks
                        id: 1
                        attributes:
                          comment: The camera is not working anymore...
                        relationships: {}
                        links:
                          self: 'https://api.restorit.fr/breaks/1'
                        meta: {}
                    links:
                      first: 'https://api.restorit.fr/breaks'
                      prev: null
                      self: 'https://api.restorit.fr/breaks'
                      next: null
                      last: 'https://api.restorit.fr/breaks'
                    meta:
                      pageNumber: 1
                      pageSize: 50
                      size: 1
                      totalSize: 1
                      totalPage: 1
                    included: []
        '422':
          description: Unprocessable Entity
      operationId: indexBreaks
      description: 'Return a collection of **break** resources.'
      parameters:
        - schema:
            type: string
            maxLength: 0
            minLength: 1
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
        - schema:
            type: string
            minLength: 1
          in: query
          name: sort
          description: Comma separated list of fields to sort. Please refer to the JSON API article
        - schema:
            type: array
          in: query
          name: filter
          description: Array of filter. Please refer to the JSON API article
      requestBody: {}
    post:
      summary: Store a break
      tags:
        - Break
      responses:
        '201':
          description: Created
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Break'
                  links:
                    type: object
                    description: Links related to the response
                  meta:
                    description: Metadata of the response
                    type: object
                  included:
                    description: Array of included relationships. Please refer to the JSON API article
                    type: array
                    items: {}
                required:
                  - data
                  - links
                  - meta
              examples:
                Example:
                  value:
                    data:
                      type: breaks
                      id: 1
                      attributes:
                        comment: The camera is not working anymore...
                      relationships: {}
                      links:
                        self: 'https://api.restorit.fr/breaks/1'
                      meta: {}
                    links: {}
                    meta: {}
                    included: []
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '422':
          description: Unprocessable Entity
      operationId: storeBreaks
      description: 'Create a **break** resource.'
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: ''
                  required:
                    - type
                    - attributes
                  properties:
                    type:
                      type: string
                      description: Type of the created resource
                      enum:
                        - breaks
                    attributes:
                      type: object
                      description: ''
                      required:
                        - comment
                      properties:
                        comment:
                          type: string
                          description: Details of the break
                          minLength: 1
                          maxLength: 2048
                    relationships:
                      type: object
                      properties:
                        author:
                          description: Author linked to this break
                          type: object
                include:
                  type: string
                  description: Comma separated list of relationships to include. Please refer to the JSON API article
                  minLength: 1
              required:
                - data
            examples:
              Example:
                value:
                  data:
                    type: breaks
                    attributes:
                      comment: The camera is not working anymore...
        description: ''
    parameters: []
  '/breaks/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
        description: ID of the resource
    get:
      summary: Get a break
      tags:
        - Break
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Break'
                  links:
                    type: object
                    description: Links related to the response
                  meta:
                    type: object
                    description: Metadata of the response
                  included:
                    type: array
                    description: Array of included relationships. Please refer to the JSON API article
                    items: {}
                required:
                  - data
                  - links
                  - meta
              examples:
                Example:
                  value:
                    data:
                      type: breaks
                      id: 1
                      attributes:
                        comment: The camera is not working anymore...
                      relationships: {}
                      links:
                        self: 'https://api.restorit.fr/breaks/1'
                      meta: {}
                    links: {}
                    meta: {}
                    included: []
          description: OK
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      operationId: showBreak
      description: 'Return a **break** resource.'
      parameters:
        - schema:
            type: string
            minLength: 1
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
    patch:
      summary: Update a break
      tags:
        - Break
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Break'
                  links:
                    type: object
                    description: Links related to the response
                  meta:
                    type: object
                    description: Metadata of the response
                  included:
                    type: array
                    description: Array of included relationships. Please refer to the JSON API article
                    items: {}
                required:
                  - data
              examples:
                Example:
                  value:
                    data:
                      type: breaks
                      id: 1
                      attributes:
                        comment: The camera is not working anymore...
                      relationships: {}
                      links:
                        self: 'https://api.restorit.fr/breaks/1'
                      meta: {}
                    links: {}
                    meta: {}
                    included: []
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      operationId: updateBreak
      description: 'Update a **break** resource.'
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  required:
                    - type
                  properties:
                    type:
                      type: string
                      enum:
                        - breaks
                      description: Type of the updated resource
                    attributes:
                      type: object
                      properties:
                        comment:
                          type: string
                          description: Details of the break
                          minLength: 1
                          maxLength: 2048
                    relationships:
                      type: object
                      properties:
                        author:
                          type: object
                          description: Author linked to this break
                include:
                  type: string
                  description: Comma separated list of relationships to include. Please refer to the JSON API article
                  minLength: 1
              required:
                - data
            examples:
              Example:
                value:
                  data:
                    type: breaks
                    attributes:
                      comment: The camera is not working anymore...
        description: ''
    delete:
      summary: Delete a break
      tags:
        - Break
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    description: Metadata of the response
                required:
                  - meta
              examples:
                Example:
                  value:
                    meta: {}
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      operationId: deleteBreak
      description: 'Delete a **break** resource.'
      requestBody: {}
      security:
        - bearerAuth: []
      parameters: []
  '/repairs':
    get:
      summary: Get a list of repairs
      tags:
        - Repairs
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Repair'
                  links:
                    type: object
                    description: Links related to the response
                  meta:
                    type: object
                    description: Metadata of the response
                  included:
                    description: Array of included relationships. Please refer to the JSON API article
                    type: array
                    items: {}
                required:
                  - data
                  - links
                  - meta
              examples:
                Example:
                  value:
                    data:
                      - type: repairs
                        id: 1
                        attributes:
                          comment: "I changed the broken screen and now it's ok !"
                        relationships: {}
                        links:
                          self: 'https://api.restorit.fr/repairs/1'
                        meta: {}
                    links:
                      first: 'https://api.restorit.fr/repairs'
                      prev: null
                      self: 'https://api.restorit.fr/repairs'
                      next: null
                      last: 'https://api.restorit.fr/repairs'
                    meta:
                      pageNumber: 1
                      pageSize: 50
                      size: 1
                      totalSize: 1
                      totalPage: 1
                    included: []
        '422':
          description: Unprocessable Entity
      operationId: indexRepairs
      description: 'Return a collection of **repair** resources.'
      parameters:
        - schema:
            type: string
            minLength: 0
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
        - schema:
            type: string
          in: query
          name: sort
          description: Comma separated list of fields to sort. Please refer to the JSON API article
        - schema:
            type: array
          in: query
          name: filter
          description: Array of filter. Please refer to the JSON API article
    parameters: []
    post:
      summary: Store a repair
      operationId: storeRepair
      responses:
        '201':
          description: Created
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Repair'
                  links:
                    description: Links related to the response
                    type: object
                  meta:
                    description: Metadata of the response
                    type: object
                  included:
                    type: array
                    description: Array of included relationships. Please refer to the JSON API article
                    items: {}
                required:
                  - data
                  - links
                  - meta
              examples:
                Example:
                  value:
                    data:
                      - type: repairs
                        id: 1
                        attributes:
                          comment: "I changed the broken screen and now it's ok !"
                        relationships: {}
                        links:
                          self: 'https://api.restorit.fr/repairs/1'
                        meta: {}
                    links: {}
                    meta: {}
                    included: []
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '422':
          description: Unprocessable Entity
      description: 'Create a **repair** resource.'
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  required:
                    - type
                    - attributes
                    - relationships
                  properties:
                    type:
                      type: string
                      enum:
                        - repairs
                      description: Type of the created resource
                    attributes:
                      type: object
                      required:
                        - comment
                      properties:
                        comment:
                          type: string
                          minLength: 1
                          maxLength: 2048
                          description: Details of the repair
                    relationships:
                      type: object
                      required:
                        - break
                      properties:
                        break:
                          type: object
                          description: Break that this repair refers to
                          required:
                            - data
                          properties:
                            data:
                              type: object
                              required:
                                - type
                                - id
                              properties:
                                type:
                                  type: string
                                  enum:
                                    - breaks
                                  description: Type of the resource to link
                                id:
                                  type: integer
                                  description: ID of the break resource to link
                include:
                  type: string
                  description: Comma separated list of relationships to include. Please refer to the JSON API article
                  minLength: 0
              required:
                - data
            examples:
              Example:
                value:
                  data:
                    - type: repairs
                      attributes:
                        comment: "I changed the broken screen and now it's ok !"
                      relationships:
                        break:
                          data:
                            type: breaks
                            id: 1
        description: ''
      tags:
        - Repairs
  '/repairs/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
        description: ID of the resource
    get:
      summary: Get a repair
      tags:
        - Repairs
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  included:
                    type: array
                    description: Array of included relationships. Please refer to the JSON API article
                    items: {}
                  meta:
                    description: Metadata of the response
                    type: object
                  links:
                    description: Links related to the response
                    type: object
                  data:
                    $ref: '#/components/schemas/Repair'
                required:
                  - meta
                  - links
                  - data
              examples:
                Example:
                  value:
                    data:
                      - type: repairs
                        id: 1
                        attributes:
                          comment: "I changed the broken screen and now it's ok !"
                        relationships: {}
                        links:
                          self: 'https://api.restorit.fr/repairs/1'
                        meta: {}
                    links: {}
                    meta: {}
                    included: []
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      operationId: showRepair
      description: 'Return a **repair** resource.'
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
    patch:
      summary: Update a repair
      operationId: updateRepair
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Repair'
                  links:
                    type: object
                    description: Links related to the response
                  meta:
                    type: object
                    description: Metadata of the response
                  included:
                    type: array
                    description: Array of included relationships. Please refer to the JSON API article
                    items: {}
                required:
                  - data
                  - links
                  - meta
              examples:
                Example:
                  value:
                    data:
                      - type: repairs
                        id: 1
                        attributes:
                          comment: "I changed the broken screen and now it's ok !"
                        relationships: {}
                        links:
                          self: 'https://api.restorit.fr/repairs/1'
                        meta: {}
                    links: {}
                    meta: {}
                    included: []
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      description: 'Update a **repair** resource.'
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  required:
                    - type
                  properties:
                    type:
                      type: string
                      description: Type of the updated resource
                    attributes:
                      type: object
                      properties:
                        comment:
                          type: string
                          description: Details of the repair
                include:
                  type: string
                  description: Comma separated list of relationships to include. Please refer to the JSON API article
              required:
                - data
            examples:
              Example:
                value:
                  data:
                    - type: repairs
                      attributes:
                        comment: "I changed the broken screen and now it's ok !"
        description: ''
      tags:
        - Repairs
    delete:
      summary: Delete a repair
      operationId: deleteRepair
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
              examples:
                Example:
                  value:
                    meta: {}
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      description: 'Delete a **repair** resource'
      security:
        - bearerAuth: []
      tags:
        - Repairs
  '/options':
    get:
      summary: Get a list of options
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Option'
                  links:
                    description: Links related to the response
                    type: object
                  meta:
                    description: Metadata of the response
                    type: object
                  included:
                    description: Array of included relationships. Please refer to the JSON API article
                    type: array
                    items: {}
                required:
                  - data
                  - links
                  - meta
              examples:
                Example:
                  value:
                    data:
                      - type: options
                        id: 1
                        attributes:
                          name: Apple
                        relationships: {}
                        links:
                          self: 'https://api.restorit.fr/options/1'
                        meta: {}
                    links:
                      first: 'https://api.restorit.fr/criteria'
                      prev: null
                      self: 'https://api.restorit.fr/criteria'
                      next: null
                      last: 'https://api.restorit.fr/criteria'
                    meta:
                      pageNumber: 1
                      pageSize: 50
                      size: 1
                      totalSize: 1
                      totalPage: 1
                    included: []
        '422':
          description: Unprocessable Entity
      operationId: indexOptions
      description: 'Return a collection of **option** resources.'
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
        - schema:
            type: string
          in: query
          name: sort
          description: Comma separated list of fields to sort. Please refer to the JSON API article
        - schema:
            type: array
          in: query
          name: filter
          description: Array of filter. Please refer to the JSON API article
      tags:
        - Options
    parameters: []
    post:
      summary: Store an option
      operationId: storeOption
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Criterion'
                  links:
                    description: Links related to the response
                    type: object
                  meta:
                    description: Metadata of the response
                    type: object
                  included:
                    description: Array of included relationships. Please refer to the JSON API article
                    type: array
                    items: {}
                required:
                  - data
                  - links
                  - meta
              examples:
                Example:
                  value:
                    data:
                      - type: options
                        id: 1
                        attributes:
                          name: Apple
                        relationships: {}
                        links:
                          self: 'https://api.restorit.fr/options/1'
                        meta: {}
                    links: {}
                    meta: {}
                    included: []
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '422':
          description: Unprocessable Entity
      description: 'Create an **option** resource.'
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  required:
                    - type
                    - attributes
                    - relationships
                  properties:
                    type:
                      type: string
                      description: Type of the created resource
                      enum:
                        - options
                    attributes:
                      type: object
                      required:
                        - name
                      properties:
                        name:
                          type: string
                          description: Name of the option
                          minLength: 1
                          maxLength: 64
                    relationships:
                      type: object
                      required:
                        - criterion
                      properties:
                        criterion:
                          type: object
                          required:
                            - data
                          description: Parent criterion to link
                          properties:
                            data:
                              type: object
                              required:
                                - type
                                - id
                              properties:
                                type:
                                  type: string
                                  description: Type of resource
                                  enum:
                                    - criteria
                                id:
                                  type: integer
                                  description: ID of the resource
                        parents:
                          type: object
                          description: Parent options
                          properties:
                            data:
                              type: object
                              properties:
                                type:
                                  type: string
                                  description: Type of resource
                                  enum:
                                    - options
                                id:
                                  type: integer
                                  description: ID of the resource
                include:
                  type: string
                  description: Comma separated list of relationships to include. Please refer to the JSON API article
              required:
                - data
            examples:
              Example:
                value:
                  data:
                    type: options
                    attributes:
                      name: Apple
                    relationships:
                      criterion:
                        data:
                          type: criteria
                          id: 1
                      parents:
                        data:
                          - type: options
                            id: 2
      tags:
        - Options
  '/options/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
        description: ID of the resource
    get:
      summary: Get an option
      tags:
        - Options
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Criterion'
                  links:
                    type: object
                    description: Links related to the response
                  meta:
                    type: object
                    description: Metadata of the response
                  included:
                    type: array
                    description: Array of included relationships. Please refer to the JSON API article
                    items: {}
                required:
                  - data
                  - links
                  - meta
              examples:
                Example:
                  value:
                    data:
                      - type: options
                        id: 1
                        attributes:
                          name: Apple
                        relationships: {}
                        links:
                          self: 'https://api.restorit.fr/options/1'
                        meta: {}
                    links: {}
                    meta: {}
                    included: []
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      operationId: showOption
      description: 'Return an **option** resource.'
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Comma separated list of relationships to include. Please refer to the JSON API article
    patch:
      summary: Update an option
      operationId: updateOption
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Option'
                  links:
                    type: string
                    description: Links related to the response
                  meta:
                    type: string
                    description: Metadata of the response
                  included:
                    type: array
                    description: Array of included relationships. Please refer to the JSON API article
                    items: {}
                required:
                  - data
                  - links
                  - meta
              examples:
                Example:
                  value:
                    data:
                      - type: options
                        id: 1
                        attributes:
                          name: Apple
                        relationships: {}
                        links:
                          self: 'https://api.restorit.fr/options/1'
                        meta: {}
                    links: {}
                    meta: {}
                    included: []
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      description: 'Update an **option** resource.'
      tags:
        - Options
      parameters: []
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  required:
                    - type
                  properties:
                    type:
                      type: string
                      enum:
                        - options
                      description: Type of the updated resource
                    attributes:
                      type: object
                      properties:
                        name:
                          type: string
                          minLength: 1
                          maxLength: 64
                          description: Name of the option
                    relationships:
                      type: object
                      properties:
                        criterion:
                          type: object
                          description: Parent criterion to link
                          properties:
                            data:
                              type: object
                              properties:
                                type:
                                  type: string
                                  description: Type of resource
                                  enum:
                                    - criteria
                                id:
                                  type: integer
                                  description: ID of the resource
                        parents:
                          type: object
                          description: Parent options
                          properties:
                            data:
                              type: array
                              items:
                                type: object
                                properties:
                                  type:
                                    type: string
                                    description: Type of resource
                                  id:
                                    type: integer
                                    description: ID of the resource
                include:
                  type: string
                  description: Comma separated list of relationships to include. Please refer to the JSON API article
              required:
                - data
    delete:
      summary: Delete an option
      operationId: deleteOption
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    description: Metadata of the response
                required:
                  - meta
              examples:
                Example:
                  value:
                    meta: {}
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Options
      description: 'Delete an **option** resource.'
      security:
        - bearerAuth: []
  '/evaluations/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
        description: ID of the resource
    get:
      summary: Get an evaluation
      tags:
        - Evaluations
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Evaluation'
                  links:
                    type: string
                  meta:
                    type: string
                  included:
                    type: string
                required:
                  - data
                  - links
                  - meta
              examples:
                Example:
                  value:
                    data:
                      type: evaluations
                      id: 1
                      attributes:
                        createdAt: '2020-02-02 00:0:00'
                        updatedAt: '2020-02-02 00:0:00'
                        comment: Maybe this is a problem in the graphic card...
                        cost: 4
                        difficulty: 1
                      relationships: {}
                      links:
                        self: 'https://api.restorit.fr/evaluations/1'
                      meta: {}
                    links: {}
                    meta: {}
                    included: []
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      operationId: showEvaluation
      description: 'Returns an **evaluation** resource.'
      parameters:
        - schema:
            type: string
          in: query
          name: includes
          description: Comma separated list of relationships to include. Please refer to the JSON API article
    patch:
      summary: Update an evaluation
      operationId: updateEvaluation
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Evaluation'
                  links:
                    type: object
                  meta:
                    type: object
                  included:
                    type: array
                    items: {}
              examples:
                Example:
                  value:
                    data:
                      type: evaluations
                      id: 1
                      attributes:
                        createdAt: '2020-02-02 00:0:00'
                        updatedAt: '2020-02-02 00:0:00'
                        comment: Maybe this is a problem in the graphic card...
                        cost: 4
                        difficulty: 1
                      relationships: {}
                      links:
                        self: 'https://api.restorit.fr/evaluations/1'
                      meta: {}
                    links: {}
                    meta: {}
                    included: []
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      description: 'Update an **evaluation** resource.'
      parameters: []
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                included:
                  type: string
                data:
                  type: object
                  required:
                    - type
                  properties:
                    type:
                      type: string
                      enum:
                        - evaluations
                    attributes:
                      type: object
                      properties:
                        comment:
                          type: string
                          minLength: 1
                          maxLength: 2048
                        cost:
                          type: integer
                          minimum: 1
                          maximum: 5
                        difficulty:
                          type: integer
                          minimum: 1
                          maximum: 5
                    relationships:
                      type: object
                      properties:
                        article:
                          type: object
                          description: The article to link this evaluation to
                          properties:
                            data:
                              type: object
                              properties:
                                type:
                                  type: string
                                  enum:
                                    - articel
                                id:
                                  type: integer
              required:
                - data
            examples:
              Example:
                value:
                  data:
                    type: evaluations
                    attributes:
                      comment: Maybe this is a problem in the graphic card...
                      cost: 4
                      difficulty: 1
        description: ''
        required: true
      tags:
        - Evaluations
    delete:
      summary: Delete an evaluation
      operationId: deleteEvaluation
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                required:
                  - meta
              examples:
                Example:
                  value:
                    meta: {}
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Evaluations
      description: 'Delete an **article** resource.'
      security:
        - bearerAuth: []
  '/negociations':
    get:
      summary: Get a list of negociations
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Negociation'
                  links:
                    type: object
                  meta:
                    type: object
                required:
                  - data
                  - links
                  - meta
              examples:
                Example:
                  value:
                    data:
                      - type: negociations
                        id: 1
                        attributes:
                          price: 130
                        links:
                          self: 'https://api.restorit.fr/negociations/1'
                    links:
                      first: 'https://api.restorit.fr/negociations'
                      prev: null
                      self: 'https://api.restorit.fr/negociations'
                      next: null
                      last: 'https://api.restorit.fr/negociations'
                    meta:
                      pageNumber: 1
                      pageSize: 50
                      size: 1
                      totalSize: 1
                      totalPage: 1
                    included: []
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable Entity
      operationId: indexNegociations
      description: 'Return a collection of **negociation** resources.'
      parameters: []
      security:
        - bearerAuth: []
    parameters: []
    post:
      summary: Store a negociation
      operationId: storeNegociation
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Negociation'
                required:
                  - data
              examples:
                Example:
                  value:
                    data:
                      type: negociations
                      id: 1
                      attributes:
                        price: 130
                      links:
                        self: 'https://api.restorit.fr/negociations/1'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '422':
          description: Unprocessable Entity
      description: 'Create a **negociation** resource.'
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  required:
                    - type
                    - relationships
                  properties:
                    type:
                      type: string
                      description: Type of the created resource
                      enum:
                        - negociations
                    attributes:
                      type: object
                      properties:
                        price:
                          type: number
                          minimum: 0
                          maximum: 100000
                          description: The price proposed for this article
                      required:
                        - price
                    relationships:
                      type: object
                      required:
                        - article
                        - message
                      properties:
                        article:
                          required:
                            - data
                          description: The negociated article
                          type: object
                          properties:
                            data:
                              type: object
                              required:
                                - type
                                - id
                              properties:
                                type:
                                  type: string
                                  enum:
                                    - articles
                                id:
                                  type: integer
                        message:
                          description: An optional message to link to this negociation
                          type: object
                          properties:
                            data:
                              type: object
                              properties:
                                type:
                                  type: string
                                  enum:
                                    - messages
                                id:
                                  type: integer
              required:
                - data
            examples:
              Example:
                value:
                  data:
                    type: negociations
                    attributes:
                      price: 130
                    relationships:
                      article:
                        data:
                          type: articles
                          id: 1
        description: ''
  '/negociations/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
        description: ID of the resource
    get:
      summary: Get a negociation
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Negociation'
                required:
                  - data
              examples:
                Example:
                  value:
                    data:
                      type: negociations
                      id: 1
                      attributes:
                        price: 130
                      links:
                        self: 'https://api.restorit.fr/negociations/1'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      operationId: showNegociation
      description: 'Return a **negociation** resource'
      security:
        - bearerAuth: []
    patch:
      summary: Update a negociation
      operationId: updateNegociation
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Evaluation'
                required:
                  - data
              examples:
                Example:
                  value:
                    data:
                      type: negociations
                      id: 1
                      attributes:
                        price: 130
                      links:
                        self: 'https://api.restorit.fr/negociations/1'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties: {}
      description: 'Update a **negociation** resource'
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  required:
                    - type
                  properties:
                    type:
                      type: string
                      description: 'The value must be **negociations**'
                    attributes:
                      type: object
                      properties:
                        price:
                          type: string
                          description: The price proposed for this article
              required:
                - data
            examples:
              Example:
                value:
                  data:
                    type: negociations
                    attributes:
                      price: 130
    delete:
      summary: Delete a negociation
      operationId: deleteNegociation
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                required:
                  - meta
              examples:
                Example:
                  value:
                    meta: {}
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      description: 'Delete a **negociation** resource'
      security:
        - bearerAuth: []
components:
  schemas:
    Login:
      title: Login payload
      required:
        - email
        - password
        - remember_me
      properties:
        email:
          description: Email
          type: string
        password:
          description: Password
          type: string
        remember_me:
          description: Add 1 week to token expiration date if true
          type: boolean
      type: object
    GetConversationRequest:
      allOf:
        - $ref: '#/components/schemas/PaginationRequest'
        - title: Get conversation with user filters
          properties:
            search:
              description: Content to search in message text
              type: string
          type: object
    GetConversationsRequest:
      allOf:
        - $ref: '#/components/schemas/PaginationRequest'
        - title: Get Conversations Filters
          properties:
            search:
              description: 'Content to search in message text, display_name of correspondent'
              type: string
              example: ''
          type: object
    PostMessageRequest:
      title: Message POST payload
      required:
        - text
        - receiver_id
      properties:
        text:
          description: 'Text (max:2048)'
          type: string
        receiver_id:
          description: Id of the receiver
          type: integer
      type: object
    UpdateMessageRequest:
      title: Message PUT payload
      required:
        - text
      properties:
        text:
          description: 'Text (max:2048)'
          type: string
      type: object
    CreateUser:
      title: User POST payload
      required:
        - name
        - display_name
        - email
        - phone
        - show_phone
        - show_email
        - password
        - password_confirmation
      properties:
        name:
          description: Fullname or pseudo
          type: string
        display_name:
          description: Display Name
          type: string
        email:
          description: Email
          type: string
        show_email:
          description: If you want other users to see your email
          type: boolean
          default: 'false'
        phone:
          description: Phone number
          type: string
        show_phone:
          description: If you want other users to see your phone number
          type: boolean
          default: 'false'
        password:
          description: Password
          type: string
        password_confirmation:
          description: Password confirmation
          type: string
      type: object
    UpdateUser:
      title: User PUT payload
      required:
        - name
        - display_name
        - email
        - phone
        - show_phone
        - show_email
      properties:
        name:
          description: Fullname or pseudo
          type: string
        display_name:
          description: Display Name
          type: string
        email:
          description: Email
          type: string
        show_email:
          description: If you want other users to see your email
          type: boolean
          default: 'false'
        phone:
          description: Phone number
          type: string
        show_phone:
          description: If you want other users to see your phone number
          type: boolean
          default: 'false'
        password:
          description: New Password
          type: string
        password_confirmation:
          description: New Password confirmation
          type: string
        current_password:
          description: Current password (required if email has changed or new password set)
          type: string
      type: object
    ConversationResource:
      title: Last Message Resource
      properties:
        id:
          description: Message id
          type: integer
        created_at:
          description: article creation time
          type: string
          format: date-time
        updated_at:
          description: article update time
          type: string
          format: date-time
        text:
          description: Text
          type: string
        correspondent:
          description: Message correspondent
          type: object
          $ref: '#/components/schemas/UserResource'
        message_author:
          description: Last Message author id
          type: integer
      type: object
    ConversationsCollectionResource:
      allOf:
        - $ref: '#/components/schemas/PaginationResource'
        - title: Last Messages Collection Resource
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ConversationResource'
          type: object
    ImageResource:
      title: Image Resource
      properties:
        id:
          description: Image id
          type: integer
        created_at:
          description: Image creation time
          type: string
          format: date-time
        updated_at:
          description: Image updated time
          type: string
          format: date-time
        path:
          description: Image path
          type: string
      type: object
    MessageResource:
      title: Message Resource
      properties:
        id:
          description: Message id
          type: integer
        created_at:
          description: article creation time
          type: string
          format: date-time
        updated_at:
          description: article update time
          type: string
          format: date-time
        text:
          description: Text
          type: string
        receiver_id:
          description: Message receiver id
          type: integer
        sender_id:
          description: Message sender id
          type: integer
      type: object
    MessagesCollectionResource:
      allOf:
        - $ref: '#/components/schemas/PaginationResource'
        - title: Messages Collection Resource
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/MessageResource'
          type: object
    UserResource:
      title: User Resource
      properties:
        id:
          description: User id
          type: integer
        created_at:
          description: user creation time
          type: string
          format: date-time
        updated_at:
          description: user updated time
          type: string
          format: date-time
        name:
          description: Fullname or pseudo
          type: string
        display_name:
          description: Display Name
          type: string
        email:
          description: Email
          type: string
        show_email:
          description: If the user email is public
          type: boolean
        phone:
          description: Phone number
          type: string
        show_phone:
          description: If the user phone number is public
          type: boolean
        is_blocked:
          description: "If the user is blocked (can't send messages)"
          type: boolean
      type: object
    Criterion:
      title: Criterion
      type: object
      description: 'This represents a criterion. **criterion** and **option** resources are used to classify **article** resources in many categories.'
      x-examples:
        Example:
          type: criteria
          id: 1
          attributes:
            name: brand
            priority: 1
          relationships: {}
          links:
            self: 'https://api.restorit.fr/criteria/1'
          meta: {}
      x-tags:
        - Criteria
      properties:
        type:
          type: string
          description: Type of the resource
          enum:
            - criteria
        id:
          type: integer
          description: ID of the resource
        attributes:
          type: object
          description: ''
          required:
            - name
            - priority
          properties:
            name:
              type: string
              description: Name of the criterion
            priority:
              type: string
              description: Display priority of the criterion
        relationships:
          type: object
          description: ''
          properties:
            options:
              type: array
              description: Options related to this criterion
              items:
                $ref: '#/components/schemas/CriterionOption'
        links:
          type: object
          description: Links related to the resource
        meta:
          type: object
          description: Metadata of the resource
      required:
        - type
        - id
        - attributes
        - links
        - meta
    Option:
      title: Option
      type: object
      description: 'This represents a criterion option. **criterion** and **option** resources are used to classify **article** resources in many categories.'
      properties:
        type:
          type: string
          enum:
            - options
          description: Type of resource
        id:
          type: integer
          description: ID of the resource
        attributes:
          required:
            - name
          type: object
          properties:
            name:
              type: string
              description: Name of the option
              minLength: 1
              maxLength: 64
        relationships:
          type: object
          properties:
            criterion:
              type: object
              description: Parent criterion of this option
            parents:
              type: string
              description: Parents of this option
            children:
              type: string
              description: Children of this option
        links:
          type: object
          description: Links related to this resource
        meta:
          type: object
          description: Metadata of the resource
      required:
        - type
        - id
        - attributes
        - relationships
      x-examples:
        Example:
          type: options
          id: 1
          attributes:
            name: Apple
          relationships: {}
          links:
            self: 'https://api.restorit.fr/options/1'
          meta: {}
    Article:
      title: Article
      x-examples:
        Example:
          data:
            id: 45
            type: articles
            atributes:
              createdAt: '2020-01-01 00:00:00'
              updatedAt: '2020-01-01 00:00:00'
              name: Selling an iPhone 7S broken
              comment: 'Hello, I am selling this iPhone 7S because the screen is broken. Please contact me by email. Thx ! :)'
              price: 120
              broken: true
            links:
              self: 'https://api.restorit.fr/articles/45'
            meta: {}
          links: {}
          meta: {}
      description: 'This resource represents an article in the marketplace. It must be linked to a event of type **break** or **repair** to be created.'
      x-tags:
        - Articles
      type: object
      properties:
        type:
          type: string
          example: articles
          description: Type of the resource
        id:
          type: integer
          description: ID of the resource
        attributes:
          type: object
          description: ''
          required:
            - title
            - comment
            - price
          properties:
            title:
              type: string
              description: Title of the article
              example: I sell an iPhone 7S
              minLength: 1
              maxLength: 64
            comment:
              type: string
              description: More details about the article
              example: I only want to be contacted by email. Thanks.
              minLength: 1
              maxLength: 2048
            price:
              type: number
              description: Price of the article
              example: 32
              minimum: 0
              maximum: 100000
        relationships:
          type: object
          description: ''
          properties:
            options:
              description: Criterion options linked to the article
              type: object
            event:
              type: object
              description: Event linked to the article
            images:
              type: object
              description: Images of the article
            evaluations:
              type: object
              description: Evaluations linked to the article
            sale:
              type: object
              description: 'If sold, the sale linked to this article'
            negociations:
              type: object
              description: Negocations linked to this article
        meta:
          type: object
          description: Metadata of the resource
        links:
          description: Links related to this resource
          type: object
      required:
        - type
        - id
        - attributes
    Break:
      title: Break
      x-tags:
        - Break
      x-examples:
        Example:
          type: breaks
          id: 42
          attributes:
            comment: The window is broken and needs a replacement
          relationships: []
          links:
            self: 'http://api.restorit.fr/breaks/42'
      description: This represents a broken object. You need to create one if you want to create a broken object article then.
      type: object
      properties:
        type:
          type: string
          description: Type of the resource
          enum:
            - breaks
          example: breaks
        id:
          type: integer
          description: ID of the resource
          example: '42'
        attributes:
          type: object
          required:
            - comment
          properties:
            comment:
              type: string
              description: Comment giving the details of the breakage
              example: The window is broken and needs a replacement
              minLength: 1
              maxLength: 2048
        relationships:
          type: object
          properties:
            article:
              description: Article linked to this break
              type: object
            author:
              type: object
              description: Author of the break
        meta:
          type: string
          description: Metadata of the resource
        links:
          type: string
          description: Links related to this resource
      required:
        - type
        - id
        - attributes
    Repair:
      title: Repair
      type: object
      description: This represents a repaired object. You need to create one if you want to create a repaired object article then.
      x-examples:
        Example:
          type: repairs
          id: 1
          attributes:
            comment: "I changed the broken screen and now it's ok !"
          relationships: {}
          links:
            self: 'http://api.restorit.fr/repairs/1'
      properties:
        type:
          type: string
          description: Type of the resource
          enum:
            - repairs
        id:
          type: integer
          description: ID of the resource
          example: '1'
        attributes:
          type: object
          required:
            - comment
          properties:
            comment:
              type: string
              description: Details of the repair
              minLength: 1
              maxLength: 2048
        relationships:
          type: object
          properties:
            article:
              type: string
              description: Article linked to this repair
            break:
              type: string
              description: Break linked to this repair
        meta:
          type: object
        links:
          type: object
      required:
        - type
        - id
        - attributes
    Evaluation:
      title: Evaluation
      type: object
      description: This represents an article evaluation.
      x-examples:
        Example:
          type: evaluations
          id: 1
          attributes:
            createdAt: '2020-02-02 00:0:00'
            updatedAt: '2020-02-02 00:0:00'
            comment: Maybe this is a problem in the graphic card...
            cost: 4
            difficulty: 1
          relationships: {}
          links:
            self: 'https://api.restorit.fr/evaluations/1'
          meta: {}
      properties:
        type:
          type: string
          enum:
            - evaluations
        id:
          type: integer
        attributes:
          type: object
          required:
            - createdAt
            - updatedAt
          properties:
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
            comment:
              type: string
              minLength: 1
              maxLength: 2048
              description: ''
            cost:
              type: integer
              minimum: 0
              maximum: 5
            difficulty:
              type: integer
              minimum: 0
              maximum: 5
        relationships:
          type: object
          properties:
            author:
              type: object
              description: The user that created the evaluation
            article:
              type: object
              description: The article linked to this evaluation
        links:
          type: object
        meta:
          type: object
      required:
        - type
        - id
        - attributes
        - links
        - meta
    Negociation:
      title: Negociation
      type: object
      description: 'Represent an article purchase proposition, it can be applied to any article.'
      x-tags:
        - Negociations
      properties:
        type:
          type: string
          description: ''
        id:
          type: string
          description: ''
        attributes:
          type: object
          properties:
            price:
              type: number
              minimum: 0
              maximum: 100000
              description: The proposed price for the article
            cancelled:
              type: boolean
            accepted:
              type: boolean
          required:
            - price
            - cancelled
            - accepted
        relationships:
          type: object
          properties:
            sale:
              type: object
              description: 'If the negociation is accepted, this is the related sale resource'
            negociator:
              type: object
              description: The negociation author
            message:
              type: object
              description: A linked message
            article:
              type: object
              description: The negociated article
        links:
          type: object
        meta:
          type: object
      required:
        - type
        - id
        - links
        - meta
    Conversation:
      title: Conversation
      type: object
      x-tags:
        - Conversations
      description: This resource represents a conversation.
      x-examples:
        Example:
          data:
            id: 45
            type: conversations
            atributes:
              createdAt: '2020-01-01 00:00:00'
              updatedAt: '2020-01-01 00:00:00'
            links:
              self: 'https://v2.api.restorit.fr/conversations/45'
            meta: {}
          links: {}
          meta: {}
      properties:
        id:
          type: integer
          description: ID of the conversation
        links:
          description: Links related to this resource
          type: object
        meta:
          type: object
          description: Metadata of the resource
        relationships:
          type: object
          description: ''
          properties:
            user1:
              description: User that created the conversation
              type: object
            user2:
              type: object
              description: Correspondent
            lastMessage:
              type: object
              description: Last message of the conversation
        type:
          type: string
          example: conversations
          description: Type of the resource
      required:
        - id
        - type
  securitySchemes:
    bearerAuth:
      type: http
      scheme: Bearer
